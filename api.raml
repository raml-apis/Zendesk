#%RAML 0.8
title: Zendesk
version: v2
baseUri: https://{domain}.zendesk.com/api/{version}
baseUriParameters:
  domain:
    description: Provide your Zendesk domain name
securitySchemes:
  - oauth_2_0: !include securitySchemes/oauth_2_0.raml
  - basic: !include securitySchemes/basic.raml
  - x-token: !include securitySchemes/x-token.raml
schemas:
  - createForumResponse: !include schemas/createForumResponse-schema.json
  - createTicketFormsResponse: !include schemas/createTicketFormsResponse-schema.json
  - listCustomRolesResponse: !include schemas/listCustomRolesResponse-schema.json
  - updateAccountSettingsResponse: !include schemas/updateAccountSettingsResponse-schema.json
  - creatingOrganizationsResponse: !include schemas/creatingOrganizationsResponse-schema.json
  - listTopicCommentsResponse: !include schemas/listTopicCommentsResponse-schema.json
  - searchingforAvailablePhoneNumbersResponse: !include schemas/searchingforAvailablePhoneNumbersResponse-schema.json
  - gettingRequestsResponse: !include schemas/gettingRequestsResponse-schema.json
  - addUserIdentityResponse: !include schemas/addUserIdentityResponse-schema.json
  - createMembershipResponse: !include schemas/createMembershipResponse-schema.json
  - showTagsResponse: !include schemas/showTagsResponse-schema.json
  - updateTopicResponse: !include schemas/updateTopicResponse-schema.json
  - updateTopicRequest: !include schemas/updateTopicRequest-schema.json
  - updatingAvailabilityResponse: !include schemas/updatingAvailabilityResponse-schema.json
  - gettingCommentsResponse: !include schemas/gettingCommentsResponse-schema.json
  - listrequirementsResponse: !include schemas/listrequirementsResponse-schema.json
  - listactiveMacrosResponse: !include schemas/listactiveMacrosResponse-schema.json
  - listingAuditsResponse: !include schemas/listingAuditsResponse-schema.json
  - showUserResponse: !include schemas/showUserResponse-schema.json
  - showTargetResponse: !include schemas/showTargetResponse-schema.json
  - listClientsResponse: !include schemas/listClientsResponse-schema.json
  - createTopicSubscriptionResponse: !include schemas/createTopicSubscriptionResponse-schema.json
  - showGroupResponse: !include schemas/showGroupResponse-schema.json
  - listAutomationsResponse: !include schemas/listAutomationsResponse-schema.json
  - listLocationInstallationsResponse: !include schemas/listLocationInstallationsResponse-schema.json
  - listLocalesResponse: !include schemas/listLocalesResponse-schema.json
  - gettingStatisticsforCurrentQueueActivityResponse: !include schemas/gettingStatisticsforCurrentQueueActivityResponse-schema.json
  - createManyVariantsResponse: !include schemas/createManyVariantsResponse-schema.json
  - listActivitiesResponse: !include schemas/listActivitiesResponse-schema.json
  - showLocationInstallationResponse: !include schemas/showLocationInstallationResponse-schema.json
  - updateViewResponse: !include schemas/updateViewResponse-schema.json
  - listingRecipientAddressesResponse: !include schemas/listingRecipientAddressesResponse-schema.json
  - bulkUpdatingTicketsRequest: !include schemas/bulkUpdatingTicketsRequest-schema.json
  - showClientResponse: !include schemas/showClientResponse-schema.json
  - gettingTicketMetricsResponse: !include schemas/gettingTicketMetricsResponse-schema.json
  - redactingcommentattachmentsResponse: !include schemas/redactingcommentattachmentsResponse-schema.json
  - updatingAvailabilityRequest: !include schemas/updatingAvailabilityRequest-schema.json
  - createRecipientAddressesResponse: !include schemas/createRecipientAddressesResponse-schema.json
  - createOrganizationFieldsResponse: !include schemas/createOrganizationFieldsResponse-schema.json
  - listMembershipsResponse: !include schemas/listMembershipsResponse-schema.json
  - updateTargetResponse: !include schemas/updateTargetResponse-schema.json
  - gettingSuspendedTicketsResponse: !include schemas/gettingSuspendedTicketsResponse-schema.json
  - listTagsResponse: !include schemas/listTagsResponse-schema.json
  - listViewsResponse: !include schemas/listViewsResponse-schema.json
  - updateMacroResponse: !include schemas/updateMacroResponse-schema.json
  - creatingGreetingsResponse: !include schemas/creatingGreetingsResponse-schema.json
  - deleteUserResponse: !include schemas/deleteUserResponse-schema.json
  - createForumSubscriptionResponse: !include schemas/createForumSubscriptionResponse-schema.json
  - showSatisfactionRatingResponse: !include schemas/showSatisfactionRatingResponse-schema.json
  - showForumResponse: !include schemas/showForumResponse-schema.json
  - listingMonitoredTwitterHandlesResponse: !include schemas/listingMonitoredTwitterHandlesResponse-schema.json
  - listingSuspendedTicketsResponse: !include schemas/listingSuspendedTicketsResponse-schema.json
  - listingLocationsResponse: !include schemas/listingLocationsResponse-schema.json
  - createUserFieldsResponse: !include schemas/createUserFieldsResponse-schema.json
  - listUsersResponse: !include schemas/listUsersResponse-schema.json
  - updateTicketFieldsResponse: !include schemas/updateTicketFieldsResponse-schema.json
  - updatingTicketsResponse: !include schemas/updatingTicketsResponse-schema.json
  - showTokenResponse: !include schemas/showTokenResponse-schema.json
  - creatingTicketsResponse: !include schemas/creatingTicketsResponse-schema.json
  - showActivityResponse: !include schemas/showActivityResponse-schema.json
  - createViewRequest: !include schemas/createViewRequest-schema.json
  - listingGreetingsResponse: !include schemas/listingGreetingsResponse-schema.json
  - showMultipleTopicsResponse: !include schemas/showMultipleTopicsResponse-schema.json
  - creatingPhoneNumbersResponse: !include schemas/creatingPhoneNumbersResponse-schema.json
  - gettingViewsResponse: !include schemas/gettingViewsResponse-schema.json
  - gettingTwicketstatusResponse: !include schemas/gettingTwicketstatusResponse-schema.json
  - searchingrequestsResponse: !include schemas/searchingrequestsResponse-schema.json
  - autocompleteProblemsResponse: !include schemas/autocompleteProblemsResponse-schema.json
  - updatingTicketsRequest: !include schemas/updatingTicketsRequest-schema.json
  - previewingViewsResponse: !include schemas/previewingViewsResponse-schema.json
  - getsettingsforanAppinstallationResponse: !include schemas/getsettingsforanAppinstallationResponse-schema.json
  - showOrganizationSubscriptionResponse: !include schemas/showOrganizationSubscriptionResponse-schema.json
  - gettingMonitoredTwitterHandleResponse: !include schemas/gettingMonitoredTwitterHandleResponse-schema.json
  - updatingPhoneNumbersResponse: !include schemas/updatingPhoneNumbersResponse-schema.json
  - organizationrelatedinformationResponse: !include schemas/organizationrelatedinformationResponse-schema.json
  - listItemsResponse: !include schemas/listItemsResponse-schema.json
  - gettingTriggersResponse: !include schemas/gettingTriggersResponse-schema.json
  - showAuditResponse: !include schemas/showAuditResponse-schema.json
  - showLocationResponse: !include schemas/showLocationResponse-schema.json
  - incrementalTicketExportResponse: !include schemas/incrementalTicketExportResponse-schema.json
  - updatingGreetingsRequest: !include schemas/updatingGreetingsRequest-schema.json
  - gettingMacrosResponse: !include schemas/gettingMacrosResponse-schema.json
  - autocompleteOrganizationsResponse: !include schemas/autocompleteOrganizationsResponse-schema.json
  - updateCategoryResponse: !include schemas/updateCategoryResponse-schema.json
  - listTokensResponse: !include schemas/listTokensResponse-schema.json
  - listingTicketsResponse: !include schemas/listingTicketsResponse-schema.json
  - updatingPhoneNumbersRequest: !include schemas/updatingPhoneNumbersRequest-schema.json
  - showLocaleResponse: !include schemas/showLocaleResponse-schema.json
  - ticketrelatedinformationRequest: !include schemas/ticketrelatedinformationRequest-schema.json
  - showTopicCommentResponse: !include schemas/showTopicCommentResponse-schema.json
  - createClientResponse: !include schemas/createClientResponse-schema.json
  - updateUserResponse: !include schemas/updateUserResponse-schema.json
  - creatingVoicemailTicketsResponse: !include schemas/creatingVoicemailTicketsResponse-schema.json
  - updatingOrganizationsRequest: !include schemas/updatingOrganizationsRequest-schema.json
  - createTriggerResponse: !include schemas/createTriggerResponse-schema.json
  - showVariantResponse: !include schemas/showVariantResponse-schema.json
  - createAutomationResponse: !include schemas/createAutomationResponse-schema.json
  - listSharingAgreementsResponse: !include schemas/listSharingAgreementsResponse-schema.json
  - showassignablegroupsResponse: !include schemas/showassignablegroupsResponse-schema.json
  - listAppinstallationsResponse: !include schemas/listAppinstallationsResponse-schema.json
  - createVoteResponse: !include schemas/createVoteResponse-schema.json
  - listForumSubscriptionsResponse: !include schemas/listForumSubscriptionsResponse-schema.json
  - uploadingfilesResponse: !include schemas/uploadingfilesResponse-schema.json
  - updateViewRequest: !include schemas/updateViewRequest-schema.json
  - showItemResponse: !include schemas/showItemResponse-schema.json
  - listTicketFormsResponse: !include schemas/listTicketFormsResponse-schema.json
  - listOrganizationSubscriptionsResponse: !include schemas/listOrganizationSubscriptionsResponse-schema.json
  - createItemResponse: !include schemas/createItemResponse-schema.json
  - executingViewsResponse: !include schemas/executingViewsResponse-schema.json
  - gettingStatisticsforAgentsActivityResponse: !include schemas/gettingStatisticsforAgentsActivityResponse-schema.json
  - listCategoriesResponse: !include schemas/listCategoriesResponse-schema.json
  - updateVariantResponse: !include schemas/updateVariantResponse-schema.json
  - updateForumResponse: !include schemas/updateForumResponse-schema.json
  - updateagivenUserIdentityResponse: !include schemas/updateagivenUserIdentityResponse-schema.json
  - listSatisfactionRatingsResponse: !include schemas/listSatisfactionRatingsResponse-schema.json
  - listingPhoneNumbersResponse: !include schemas/listingPhoneNumbersResponse-schema.json
  - exportingViewsResponse: !include schemas/exportingViewsResponse-schema.json
  - listingTicketMetricsResponse: !include schemas/listingTicketMetricsResponse-schema.json
  - gettingGreetingCategoryResponse: !include schemas/gettingGreetingCategoryResponse-schema.json
  - listForumsResponse: !include schemas/listForumsResponse-schema.json
  - redactingacommentResponse: !include schemas/redactingacommentResponse-schema.json
  - ticketrelatedinformationResponse: !include schemas/ticketrelatedinformationResponse-schema.json
  - applyMacrosResponse: !include schemas/applyMacrosResponse-schema.json
  - creatingTicketsRequest: !include schemas/creatingTicketsRequest-schema.json
  - listactiveTriggersResponse: !include schemas/listactiveTriggersResponse-schema.json
  - listTicketFieldsResponse: !include schemas/listTicketFieldsResponse-schema.json
  - listOrganizationFieldsResponse: !include schemas/listOrganizationFieldsResponse-schema.json
  - showJobStatusResponse: !include schemas/showJobStatusResponse-schema.json
  - gettingStatisticsforHistoricalQueueActivityResponse: !include schemas/gettingStatisticsforHistoricalQueueActivityResponse-schema.json
  - listingGreetingCategoriesResponse: !include schemas/listingGreetingCategoriesResponse-schema.json
  - listUserFieldsResponse: !include schemas/listUserFieldsResponse-schema.json
  - listTriggersResponse: !include schemas/listTriggersResponse-schema.json
  - listTargetsResponse: !include schemas/listTargetsResponse-schema.json
  - gettingAutomationsResponse: !include schemas/gettingAutomationsResponse-schema.json
  - userrelatedinformationResponse: !include schemas/userrelatedinformationResponse-schema.json
  - listTopicSubscriptionsResponse: !include schemas/listTopicSubscriptionsResponse-schema.json
  - searchArticlesorQuestionsResponse: !include schemas/searchArticlesorQuestionsResponse-schema.json
  - maicro: !include schemas/maicro-schema.json
  - autmationCreation: !include schemas/autmationCreation-schema.json
  - newCategory: !include schemas/newCategory-schema.json
  - newSubscription: !include schemas/newSubscription-schema.json
  - newGroup: !include schemas/newGroup-schema.json
  - newGroupMembership: !include schemas/newGroupMembership-schema.json
  - newOrganization: !include schemas/newOrganization-schema.json
  - newOrgField: !include schemas/newOrgField-schema.json
  - orgSubscription: !include schemas/orgSubscription-schema.json
  - newRequest: !include schemas/newRequest-schema.json
  - newAddress: !include schemas/newAddress-schema.json
  - newTarget: !include schemas/newTarget-schema.json
  - newTicketField: !include schemas/newTicketField-schema.json
  - newTicketForm: !include schemas/newTicketForm-schema.json
  - newTopics: !include schemas/newTopics-schema.json
  - newTopicSubscription: !include schemas/newTopicSubscription-schema.json
  - newTriggers: !include schemas/newTriggers-schema.json
  - newUser: !include schemas/newUser-schema.json
  - newUserField: !include schemas/newUserField-schema.json
  - newView: !include schemas/newView-schema.json
  - newForum: !include schemas/newForum-schema.json
  - newDynamicItem: !include schemas/newDynamicItem-schema.json
  - updateUserField: !include schemas/updateUserField-schema.json
  - updateOrgField: !include schemas/updateOrgField-schema.json
  - articleAttachment: !include schemas/articleAttachment-schema.json
  - accountUpdate: !include schemas/accountUpdate-schema.json
  - appUploadResponse: !include schemas/appUploadResponse-schema.json
  - appsJobResponse: !include schemas/appsJobResponse-schema.json
  - updateApp: !include schemas/updateApp-schema.json
  - updateAppResponse: !include schemas/updateAppResponse-schema.json
  - appResponse: !include schemas/appResponse-schema.json
  - appNotfy: !include schemas/appNotfy-schema.json
  - appOwnedResponse: !include schemas/appOwnedResponse-schema.json
  - appInstallations: !include schemas/appInstallations-schema.json
  - singleInstallationUpdate: !include schemas/singleInstallationUpdate-schema.json
  - appInstallReorder: !include schemas/appInstallReorder-schema.json
  - getAttachment: !include schemas/getAttachment-schema.json
  - ticketRating: !include schemas/ticketRating-schema.json
  - dynamicContentUpdate: !include schemas/dynamicContentUpdate-schema.json
  - endUserUpdate: !include schemas/endUserUpdate-schema.json
  - endUserIdentity: !include schemas/endUserIdentity-schema.json
  - forumApdate: !include schemas/forumApdate-schema.json
  - updateMacros: !include schemas/updateMacros-schema.json
  - createTicketByTwitter: !include schemas/createTicketByTwitter-schema.json
  - phoneNumbers: !include schemas/phoneNumbers-schema.json
  - voiceGreetings: !include schemas/voiceGreetings-schema.json
  - oauthClientCreate: !include schemas/oauthClientCreate-schema.json
  - oauth: !include schemas/oauth-schema.json
  - userFieldsReoder: !include schemas/userFieldsReoder-schema.json
  - updateRequest: !include schemas/updateRequest-schema.json
  - recipientAddressUpdate: !include schemas/recipientAddressUpdate-schema.json
  - recipientVerify: !include schemas/recipientVerify-schema.json
  - createTopicComment: !include schemas/createTopicComment-schema.json
  - updateTarget: !include schemas/updateTarget-schema.json
  - newTicketResponse: !include schemas/newTicketResponse-schema.json
  - updateTicketField: !include schemas/updateTicketField-schema.json
  - updateTicketForm: !include schemas/updateTicketForm-schema.json
  - reoderTicketForms: !include schemas/reoderTicketForms-schema.json
  - newImport: !include schemas/newImport-schema.json
  - triggerUpdate: !include schemas/triggerUpdate-schema.json
  - triggerReorder: !include schemas/triggerReorder-schema.json
  - previewView: !include schemas/previewView-schema.json
  - countPreview: !include schemas/countPreview-schema.json
  - showAccessPolicyResponse: !include schemas/showAccessPolicyResponse-schema.json
  - updateAccessPolicyResponse: !include schemas/updateAccessPolicyResponse-schema.json
  - createSectionSubscriptionResponse: !include schemas/createSectionSubscriptionResponse-schema.json
  - listSectionSubscriptionsResponse: !include schemas/listSectionSubscriptionsResponse-schema.json
  - showSectionSubscriptionResponse: !include schemas/showSectionSubscriptionResponse-schema.json
  - createTranslationResponse: !include schemas/createTranslationResponse-schema.json
  - listTranslationsResponse: !include schemas/listTranslationsResponse-schema.json
  - listMissingTranslationsResponse: !include schemas/listMissingTranslationsResponse-schema.json
  - updateAccessPolicy: !include schemas/updateAccessPolicy-schema.json
  - sectionSubscription: !include schemas/sectionSubscription-schema.json
  - createTranslation: !include schemas/createTranslation-schema.json
  - updateTranslationResponse: !include schemas/updateTranslationResponse-schema.json
  - createArticleResponse: !include schemas/createArticleResponse-schema.json
  - listArticlesResponse: !include schemas/listArticlesResponse-schema.json
  - updateSectionResponse: !include schemas/updateSectionResponse-schema.json
  - showSectionResponse: !include schemas/showSectionResponse-schema.json
  - updateSection: !include schemas/updateSection-schema.json
  - sourceLocale: !include schemas/sourceLocale-schema.json
  - showArticleResponse: !include schemas/showArticleResponse-schema.json
  - updateArticleResponse: !include schemas/updateArticleResponse-schema.json
  - updateArticle: !include schemas/updateArticle-schema.json
  - createCategory: !include schemas/createCategory-schema.json
  - showCategoryResponse: !include schemas/showCategoryResponse-schema.json
  - updateCategoryHCResponse: !include schemas/updateCategoryHCResponse-schema.json
  - updateCategory: !include schemas/updateCategory-schema.json
  - createCategorySection: !include schemas/createCategorySection-schema.json
  - createSectionResponse: !include schemas/createSectionResponse-schema.json
  - updateLocale: !include schemas/updateLocale-schema.json
  - updateSourceLocale: !include schemas/updateSourceLocale-schema.json
  - listCommentsResponse: !include schemas/listCommentsResponse-schema.json
  - listSubscriptionsByUserResponse: !include schemas/listSubscriptionsByUserResponse-schema.json
  - listVotesResponse: !include schemas/listVotesResponse-schema.json
  - createBulkAttachment: !include schemas/createBulkAttachment-schema.json
  - createArticleComments: !include schemas/createArticleComments-schema.json
  - updateArticleComment: !include schemas/updateArticleComment-schema.json
  - listArticleLabelsResponse: !include schemas/listArticleLabelsResponse-schema.json
  - createLabelResponse: !include schemas/createLabelResponse-schema.json
  - createArticleLabel: !include schemas/createArticleLabel-schema.json
  - showCommentResponse: !include schemas/showCommentResponse-schema.json
  - updateCommentResponse: !include schemas/updateCommentResponse-schema.json
  - listArticleInlineAttachmentsResponse: !include schemas/listArticleInlineAttachmentsResponse-schema.json
  - listArticleBlockAttachmentsResponse: !include schemas/listArticleBlockAttachmentsResponse-schema.json
  - createArticleSubscriptionResponse: !include schemas/createArticleSubscriptionResponse-schema.json
  - listArticleSubscriptionsResponse: !include schemas/listArticleSubscriptionsResponse-schema.json
  - createSubscription: !include schemas/createSubscription-schema.json
  - showArticleSubscriptionResponse: !include schemas/showArticleSubscriptionResponse-schema.json
  - showTranslationResponse: !include schemas/showTranslationResponse-schema.json
  - showArticleAttachmentResponse: !include schemas/showArticleAttachmentResponse-schema.json
  - createUnassociatedAttachmentResponse: !include schemas/createUnassociatedAttachmentResponse-schema.json
  - listAllLabelsResponse: !include schemas/listAllLabelsResponse-schema.json
  - showLabelResponse: !include schemas/showLabelResponse-schema.json
  - listSectionsResponse: !include schemas/listSectionsResponse-schema.json
  - showVoteResponse: !include schemas/showVoteResponse-schema.json
  - createTag: !include schemas/createTag-schema.json
  - tagResponse: !include schemas/tagResponse-schema.json
  - updateTagRequest: !include schemas/updateTagRequest-schema.json
  - updateTagResponse: !include schemas/updateTagResponse-schema.json
  - deleteTagResponse: !include schemas/deleteTagResponse-schema.json
  - searchResponse: !include schemas/searchResponse-schema.json
  - createAppResponse: !include schemas/createAppResponse-schema.json
  - mergeRequest: !include schemas/mergeRequest-schema.json
  - createMany: !include schemas/createMany-schema.json
  - createManyResponse: !include schemas/createManyResponse-schema.json
  - showManyResponse: !include schemas/showManyResponse-schema.json
  - updateManyResponse: !include schemas/updateManyResponse-schema.json
  - auditLogsResponse: !include schemas/auditLogsResponse-schema.json
  - aiditLogResponse: !include schemas/aiditLogResponse-schema.json
  - automationsCreateResponse: !include schemas/automationsCreateResponse-schema.json
  - updateAutomationRequest: !include schemas/updateAutomationRequest-schema.json
  - categoryCreateResponse: !include schemas/categoryCreateResponse-schema.json
  - categoryUpdateRequest: !include schemas/categoryUpdateRequest-schema.json
  - variantUpdateRequest: !include schemas/variantUpdateRequest-schema.json
  - variantUpdateManyRequest: !include schemas/variantUpdateManyRequest-schema.json
  - variantUpdateManyResponse: !include schemas/variantUpdateManyResponse-schema.json
  - forumSubscriptionsRespons: !include schemas/forumSubscriptionsRespons-schema.json
  - forumTopicsResponse: !include schemas/forumTopicsResponse-schema.json
  - forumSubscriptionCreateResponse: !include schemas/forumSubscriptionCreateResponse-schema.json
  - groupMembershipResponse: !include schemas/groupMembershipResponse-schema.json
  - listMembersipsResponse: !include schemas/listMembersipsResponse-schema.json
  - ticketsListResponse: !include schemas/ticketsListResponse-schema.json
  - newPasswordRequest: !include schemas/newPasswordRequest-schema.json
  - passwordUpdateRequest: !include schemas/passwordUpdateRequest-schema.json
  - identitiesCreateResponse: !include schemas/identitiesCreateResponse-schema.json
  - identityCreateRequest: !include schemas/identityCreateRequest-schema.json
  - identityCreateResponse: !include schemas/identityCreateResponse-schema.json
  - identityResponse: !include schemas/identityResponse-schema.json
  - userIdentityResponse: !include schemas/userIdentityResponse-schema.json
  - userRequestsResponse: !include schemas/userRequestsResponse-schema.json
  - topicVotesResponse: !include schemas/topicVotesResponse-schema.json
  - usersResponse: !include schemas/usersResponse-schema.json
  - groupMembershipCreateResponse: !include schemas/groupMembershipCreateResponse-schema.json
  - ticketEventResponse: !include schemas/ticketEventResponse-schema.json
  - incrementalOrganizationsResponse: !include schemas/incrementalOrganizationsResponse-schema.json
  - incrementalUsersResponse: !include schemas/incrementalUsersResponse-schema.json
  - currentLocalesResponse: !include schemas/currentLocalesResponse-schema.json
  - macrosApplyResponse: !include schemas/macrosApplyResponse-schema.json
  - voiceTicketCreateRequest: !include schemas/voiceTicketCreateRequest-schema.json
  - organizationsListResponse: !include schemas/organizationsListResponse-schema.json
  - organizationCreateResponse: !include schemas/organizationCreateResponse-schema.json
  - organizationSubscriptionsResponse: !include schemas/organizationSubscriptionsResponse-schema.json
  - createOrganizationsResponse: !include schemas/createOrganizationsResponse-schema.json
  - organiziationSubscriptionResponse: !include schemas/organiziationSubscriptionResponse-schema.json
  - requestsResponse: !include schemas/requestsResponse-schema.json
  - createRequestResponse: !include schemas/createRequestResponse-schema.json
  - topicCommentsResponse: !include schemas/topicCommentsResponse-schema.json
  - topicVoteResponse: !include schemas/topicVoteResponse-schema.json
  - topicSingleCommentResponse: !include schemas/topicSingleCommentResponse-schema.json
  - topicSubscriptionsResponse: !include schemas/topicSubscriptionsResponse-schema.json
  - targetCreateResponse: !include schemas/targetCreateResponse-schema.json
  - ticketFieldCreateResponse: !include schemas/ticketFieldCreateResponse-schema.json
  - topicsResponse: !include schemas/topicsResponse-schema.json
  - topicCommentCreateResponse: !include schemas/topicCommentCreateResponse-schema.json
  - topicSubscriptionsCreateResponse: !include schemas/topicSubscriptionsCreateResponse-schema.json
  - usersReponse: !include schemas/usersReponse-schema.json
  - viewTicketsResponse: !include schemas/viewTicketsResponse-schema.json
  - ticketsCountResponse: !include schemas/ticketsCountResponse-schema.json
  - viewCountManyResponse: !include schemas/viewCountManyResponse-schema.json
  - viewPreviewCountResponse: !include schemas/viewPreviewCountResponse-schema.json
  - hcArticlesResponse: !include schemas/hcArticlesResponse-schema.json
  - hcArcticleCreateRequest: !include schemas/hcArcticleCreateRequest-schema.json
  - hcLocaleSectionsResponse: !include schemas/hcLocaleSectionsResponse-schema.json
  - hcArticleSearchResponse: !include schemas/hcArticleSearchResponse-schema.xsd
  - bookmarkResponse: !include schemas/bookmarkResponse-schema.json
  - bookmarkCreateRequest: !include schemas/bookmarkCreateRequest-schema.json
  - bookmarkCreateResponse: !include schemas/bookmarkCreateResponse-schema.json
  - listarticlelabelsresponse: !include schemas/listArticleLabelsResponse-schema.json
  - createCategoryResponse: !include /schemas/createCategoryResponse-schema.json
  - listArticleAttachmentsResponse: !include /schemas/listArticleAttachmentsResponse-schema.json
  - listallenabledlocalesanddefaultlocaleResponse: !include /schemas/listallenabledlocalesanddefaultlocaleResponse-schema.json
  - createCommentResponse: !include /schemas/createCommentResponse-schema.json
resourceTypes:
  - mediaTypeExtension: !include resourceTypes/mediaTypeExtension.raml
  - tags: !include resourceTypes/tags.raml
  - merge: !include resourceTypes/merge.raml
  - createMany: !include resourceTypes/createMany.raml
  - searchExternal: !include resourceTypes/searchExternal.raml
  - search: !include resourceTypes/search.raml
traits:
  - startTime: !include traits/startTime.raml
  - status: !include traits/status.raml
  - ids: !include traits/ids.raml
  - query: !include traits/query.raml
  - name: !include traits/name.raml
securedBy: [ oauth_2_0 ]
/account: 
  /settings{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: This shows the settings that are available for the account.
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: updateAccountSettingsResponse
              example: !include examples/showSettingsResponse-example.json
    put: 
      description: |
        Only two settings can be updated:"lotus": { "prefer_lotus": boolean }, where boolean is true or false "ticket_form": { "ticket_forms_instructions": "your_instructions" }, where "your_instructions" is the string displayed when end-users select a form
         Allowed For: [Admins]
      body: 
        application/json: 
          schema: accountUpdate
          example: !include examples/accountUpdate-example.json
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: updateAccountSettingsResponse
              example: !include examples/updateAccountSettingsResponse-example.json
/activities{mediaTypeExtension}: 
  type: mediaTypeExtension
  get: 
    description: List Activities
    responses: 
      200: 
        description: OK
        body: 
          application/json: 
            schema: listActivitiesResponse
            example: !include examples/listActivitiesResponse-example.json
/activities: 
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Show Activity
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: showActivityResponse
              example: !include examples/showActivityResponse-example.json
/apps: 
  /uploads{mediaTypeExtension}: 
    type: mediaTypeExtension
    post: 
      description: Upload a new zip file package for an app. Use the returned upload id to create or update an app.
      body: 
        multipart/form-data: 
          formParameters: 
            uploaded_data: 
      responses: 
        200: 
          body: 
            application/json: 
              schema: appUploadResponse
              example: !include examples/appUploadResponse-example.json
  /job_statuses: 
    /{id}{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: Queries the application build job status using a job id given from the job creation step.
        responses: 
          200: 
            body: 
              application/json: 
                schema: appsJobResponse
                example: !include examples/appsJobResponse-example.json
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    put: 
      description: Enqueues a build of an existing app from a new upload, as specified by the upload_id parameter
      body: 
        application/json: 
          schema: updateApp
          example: !include examples/updateApp-example.json
      responses: 
        200: 
          body: 
            application/json: 
              schema: updateAppResponse
              example: !include examples/updateAppResponse-example.json
    get: 
      description: Retrieves information about an App owned by the current account, where {id} is the id of the App.
      responses: 
        200: 
          body: 
            application/json: 
              schema: appResponse
              example: !include examples/appResponse-example.json
    delete: 
      description: Deletes an App and removes it from Manage Apps
      responses: 
        200: 
  /owned{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Lists Apps which are owned by the current account
      responses: 
        200: 
          body: 
            application/json: 
              schema: appOwnedResponse
              example: !include examples/appOwnedResponse-example.json
  /notify{mediaTypeExtension}: 
    type: mediaTypeExtension
    post: 
      description: The notify endpoint allows you to send messages to currently-open instances of an app. For example, you could send a message to all logged-in agents telling them to take the day off.
      body: 
        application/json: 
          schema: appNotfy
          example: !include examples/appNotfy-example.json
      responses: 
        200: 
          description: aoeuaoeu
  /installations{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Lists all App installations on the account.
      queryParameters: 
        include: 
          description: Parameter to side-load the app object associated with each installation.
          example: app
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: listAppinstallationsResponse
              example: !include examples/listAppinstallationsResponse-example.json
    post: 
      description: "Installs an App on the account. app_id is required, as is a settings hash containing keys for all required parameters for the app. Any values in settings that don't correspond to a parameter that the app declares will be silently ignored."
      body: 
        application/json: 
          schema: appInstallations
          example: !include examples/appInstallations-example.json
      responses: 
        201: 
          description: |
            Created
            Location: https://{subdomain}.zendesk.com/api/v2/apps/installations/{id}.json
          body: 
            application/json: 
              schema: getsettingsforanAppinstallationResponse
              example: !include examples/installanAppResponse-example.json
  /installations: 
    /{id}{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: Retrieve information about an App installation, including the settings for that App installation.
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: getsettingsforanAppinstallationResponse
                example: !include examples/getsettingsforanAppinstallationResponse-example.json
      put: 
        description: Updates an installation. app_id will be ignored; otherwise, this behaves much like creating installations.
        body: 
          application/json: 
            schema: singleInstallationUpdate
            example: !include examples/singleInstallationUpdate-example.json
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: getsettingsforanAppinstallationResponse
                example: !include examples/updateanAppinstallationResponse-example.json
      delete: 
        description: Removed an installed App. Use the installation id from the installation list response to make this request.
        responses: 
          200: 
    /{id}: 
      /requirements{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: Lists all Apps Requirements for an installation.
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: listrequirementsResponse
                  example: !include examples/listrequirementsResponse-example.json
  /locations{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: |
        Returns the list of locations available for use in Zendesk Apps
         Allowed For: [Admins]
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: listingLocationsResponse
              example: !include examples/listingLocationsResponse-example.json
  /locations: 
    /{id}{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: |
          Returns the Location record
           Allowed For: [Admins]
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: showLocationResponse
                example: !include examples/showLocationResponse-example.json
  /location_installations{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: |
        Returns the list of Location Installation records
         Allowed For: [Admins]
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: listLocationInstallationsResponse
              example: !include examples/listLocationInstallationsResponse-example.json
  /location_installations: 
    /{id}{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: |
          Returns the Location Installation record
           Allowed For: [Admins]
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: showLocationInstallationResponse
                example: !include examples/showLocationInstallationResponse-example.json
    /reorder{mediaTypeExtension}: 
      type: mediaTypeExtension
      post: 
        description: |
          Creates or updates the relevant Location Installation record with the installation order specified.
           Allowed For: [Admins]
        body: 
          application/json: 
            schema: appInstallReorder
            example: !include examples/appInstallReorder-example.json
        responses: 
          201: 
            description: |
              Created
              Location: /api/v2/apps/location_installations/2
            body: 
              application/json: 
                schema: showLocationInstallationResponse
                example: !include examples/reorderAppInstallationsforalocationResponse-example.json
/apps{mediaTypeExtension}: 
  type: mediaTypeExtension
  post: 
    description: Adds to the queue a build of a new app from a new upload, as specified by the upload_id parameter
    body: 
      application/json: 
        schema: updateApp
        example: !include examples/createApp-example.json
    responses: 
      200: 
        body: 
          application/json: 
            schema: createAppResponse
            example: !include examples/createAppResponse-example.json
/uploads{mediaTypeExtension}: 
  type: mediaTypeExtension
  post: 
    description: |
      Adding multiple attachments to the same upload is handled by splitting requests and passing the API token received from the first request to each subsequent request.
       Allowed For: [End Users]
    queryParameters: 
      filename: 
        description: Attachment file name
        example: myfile.dat
      token: 
        description: Token
        example: 6bk3gql82em5nmf
    body: 
      multipart/form-data: 
        formParameters: 
          uploaded_data: 
            type: file
    responses: 
      201: 
        description: |
          Created
          Location: https://helpdesk.zendesk.com/api/v2/attachments/498483.json
        body: 
          application/json: 
            schema: uploadingfilesResponse
            example: !include examples/uploadingfilesResponse-example.json
/uploads: 
  /{token}{mediaTypeExtension}: 
    type: mediaTypeExtension
    delete: 
      description: |
        Delete upload
      responses: 
        200: 
/attachments: 
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: |
        Retrieve attachment
      responses: 
        200: 
          description: ""
          body: 
            application/json: 
              schema: getAttachment
              example: !include examples/getAttachment-example.json
    delete: 
      description: |
        Currently, only attachments on forum posts are allowed to be deleted.
         Allowed For: [Agents]
      responses: 
        200: 
/tickets: 
  /{id}: 
    /comments{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: Listing comments
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: listCommentsResponse
                example: !include examples/listCommentsResponse-example.json
    /comments: 
      /{comment_id}: 
        /attachments: 
          /{attachment_id}: 
            /redact{mediaTypeExtension}: 
              type: mediaTypeExtension
              put: 
                description: |
                  Redaction allows you to permanently remove attachments from an existing comment on a ticket. Once removed from a comment, the attachment is replaced with a placeholder, "redacted.txt" file.
                   Allowed For: [Admins]
                responses: 
                  200: 
                    description: OK
                    body: 
                      application/json: 
                        schema: redactingcommentattachmentsResponse
                        example: !include examples/redactingcommentattachmentsResponse-example.json
        /redact{mediaTypeExtension}: 
          type: mediaTypeExtension
          put: 
            description: |
              Redaction allows you to permanently remove words or strings from an existing comment on a ticket. Once removed from a comment, the word or string will be replaced
               Allowed For: [Agents]
            responses: 
              200: 
                description: OK
                body: 
                  application/json: 
                    schema: redactingacommentResponse
                    example: !include examples/redactingacommentResponse-example.json
        /make_private{mediaTypeExtension}: 
          type: mediaTypeExtension
          put: 
            description: Make attachment private
            responses: 
              200: 
    /macros: 
      /{id}: 
        /apply{mediaTypeExtension}: 
          type: mediaTypeExtension
          get: 
            description: Applies a macro to a specific ticket, or to all applicable tickets.
            responses: 
              200: 
                description: ""
                body: 
                  application/json: 
                    schema: applyMacrosResponse
                    example: !include examples/applyMacrosResponse-example.json
    /satisfaction_rating{mediaTypeExtension}: 
      type: mediaTypeExtension
      post: 
        description: Create satisfaction rating
        body: 
          application/json: 
            schema: ticketRating
            example: !include examples/ticketRating-example.json
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: showSatisfactionRatingResponse
                example: !include examples/createaSatisfactionRatingResponse-example.json
    /audits{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: Listing Audits
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: listingAuditsResponse
                example: !include examples/listingAuditsResponse-example.json
    /audits: 
      /{id}{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: Show Audit
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: showAuditResponse
                  example: !include examples/showAuditResponse-example.json
      /{id}: 
        /make_private{mediaTypeExtension}: 
          type: mediaTypeExtension
          put: 
            description: Change a comment from public to private
            responses: 
              200: 
    /tags{mediaTypeExtension}: 
      type: tags
      uriParameters: 
        mediaTypeExtension: 
          displayName: mediaTypeExtension
          required: true
          enum: [ .json ]
          default: .json
    /mark_as_spam{mediaTypeExtension}: 
      type: mediaTypeExtension
      put: 
        description: |
          Mark as spam
        responses: 
          200: 
    /merge{mediaTypeExtension}: 
      type: mediaTypeExtension
      post: 
        description: |
          Merge tickets
        body: 
          application/json: 
            schema: ticketrelatedinformationRequest
            example: !include examples/ticketrelatedinformationRequest-example.json
        responses: 
          200: 
            body: 
              application/json: 
                schema: ticketrelatedinformationResponse
                example: !include examples/ticketrelatedinformationResponse-example.json
    /related{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: Retrieve related tickets
        body: 
          application/json: 
            schema: ticketrelatedinformationRequest
            example: !include examples/ticketrelatedinformationRequest-example.json
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: ticketrelatedinformationResponse
                example: !include examples/ticketrelatedinformationResponse-example.json
    /collaborators{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: |
          Retrieve ticket collaborators
        responses: 
          200: 
            description: ""
            body: 
              application/json: 
                schema: listUsersResponse
                example: !include examples/listCollaboratorsforaTicketResponse-example.json
    /incidents{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: |
          Retrieve ticket incidents
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: autocompleteProblemsResponse
                example: !include examples/listingTicketIncidentsResponse-example.json
    /metrics{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: Getting Ticket Metrics
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: gettingTicketMetricsResponse
                example: !include examples/gettingTicketMetricsResponse-example.json
  /recent{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Retrieve recent tickets
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: listingTicketsResponse
              example: !include examples/listingTicketsResponse-example.json
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: |
        Retrieve single ticket
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: creatingTicketsResponse
              example: !include examples/gettingTicketsResponse-example.json
    put: 
      description: Update ticket
      body: 
        application/json: 
          schema: updatingTicketsRequest
          example: !include examples/updatingTicketsRequest-example.json
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: updatingTicketsResponse
              example: !include examples/updatingTicketsResponse-example.json
    delete: 
      description: |
        Delete ticket
      responses: 
        200: 
  /show_many{mediaTypeExtension}: 
    type: mediaTypeExtension
    post: 
      description: Show multiple tickets
      queryParameters: 
        ids: 
          description: IDs
          example: ids={ids}
      responses: 
        200: 
          body: 
            application/json: 
              schema: showManyResponse
              example: !include examples/showManyResponse-example.json
  /update_many{mediaTypeExtension}: 
    type: mediaTypeExtension
    put: 
      is: [ ids ]
      description: |
        Update multiple tickets
      body: 
        application/json: 
          schema: bulkUpdatingTicketsRequest
          example: !include examples/bulkUpdatingTicketsRequest-example.json
      responses: 
        200: 
          body: 
            application/json: 
              schema: updateManyResponse
              example: !include examples/updateManyResponse-example.json
  /mark_many_as_spam{mediaTypeExtension}: 
    type: mediaTypeExtension
    put: 
      is: [ ids ]
      description: Mark many tickets as spam
      responses: 
        200: 
  /destroy_many{mediaTypeExtension}: 
    type: mediaTypeExtension
    delete: 
      is: [ ids ]
      description: Destroy many tickets
      responses: 
        200: 
/audit_logs{mediaTypeExtension}: 
  type: mediaTypeExtension
  get: 
    description: Listing Audit Logs
    queryParameters: 
      filter[source_type]: 
        description: Filter by source type
        example: user
      filter[actor_id]: 
        description: Filter by actor
        example: 132
    responses: 
      200: 
        body: 
          application/json: 
            schema: auditLogsResponse
            example: !include examples/auditLogsResponse-example.json
/audit_logs: 
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Getting Audit Logs
      queryParameters: 
        filter[source_type]: 
          example: filter[source_type]=user
        filter[actor_id]: 
          example: filter[actor_id]=123
      responses: 
        200: 
          body: 
            application/json: 
              schema: aiditLogResponse
              example: !include examples/aiditLogResponse-example.json
/autocomplete: 
  /tags{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      is: [ name ]
      description: |
        Returns an array of registered and recent tag names that start with the specified name. The name must be at least 2 characters in length.
         Allowed For: [Agents]
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: showTagsResponse
              example: !include examples/autocompleteTagsResponse-example.json
/automations{mediaTypeExtension}: 
  type: mediaTypeExtension
  get: 
    description: Lists all automations for the current account
    responses: 
      200: 
        description: OK
        body: 
          application/json: 
            schema: listAutomationsResponse
            example: !include examples/listAutomationsResponse-example.json
  post: 
    description: Create automation
    body: 
      application/json: 
        schema: autmationCreation
        example: !include examples/autmationCreation-example.json
    responses: 
      201: 
        body: 
          application/json: 
            schema: automationsCreateResponse
            example: !include examples/automationsCreateResponse-example.json
/automations: 
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Lists all automations for the current account
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: gettingAutomationsResponse
              example: !include examples/gettingAutomationsResponse-example.json
    put: 
      description: |
        Update single automation
      body: 
        application/json: 
          schema: updateAutomationRequest
          example: !include examples/updateAutomationRequest-example.json
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: createAutomationResponse
              example: !include examples/updateAutomationResponse-example.json
    delete: 
      description: |
        Delete automation
      responses: 
        200: 
  /active{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Lists all active automations
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: listAutomationsResponse
              example: !include examples/listactiveAutomationsResponse-example.json
/categories{mediaTypeExtension}: 
  type: mediaTypeExtension
  get: 
    description: List Categories
    responses: 
      200: 
        description: OK
        body: 
          application/json: 
            schema: listCategoriesResponse
            example: !include examples/listCategoriesResponse-example.json
  post: 
    description: Create new category
    body: 
      application/json: 
        schema: newCategory
        example: !include examples/newCategory-example.json
    responses: 
      201: 
        body: 
          application/json: 
            schema: categoryCreateResponse
            example: !include examples/categoryCreateResponse-example.json
/categories: 
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Show Category
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: showCategoryResponse
              example: !include examples/showCategoryResponse-example.json
    delete: 
      description: Delete Category
      responses: 
        200: 
    put: 
      description: Update Category
      body: 
        application/json: 
          schema: categoryUpdateRequest
          example: !include examples/categoryUpdateRequest-example.json
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: updateCategoryResponse
              example: !include examples/updateCategoryResponse-example.json
  /{id}: 
    /forums{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: List Forums
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: listForumsResponse
                example: !include examples/listForumsResponse-example.json
/custom_roles{mediaTypeExtension}: 
  type: mediaTypeExtension
  get: 
    description: List Custom Roles
    responses: 
      200: 
        description: OK
        body: 
          application/json: 
            schema: listCustomRolesResponse
            example: !include examples/listCustomRolesResponse-example.json
/dynamic_content: 
  /items{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: |
        Returns a list of all dynamic content items for your account if accessed as an admin or agents who have permission to manage dynamic content.
         Allowed For: [Admins, Agents]
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: listItemsResponse
              example: !include examples/listItemsResponse-example.json
    post: 
      description: |
        When creating a new dynamic content item, you'll be creating the first variant for that item simultaneously.
         Allowed For: [Admins, Agents]
      body: 
        application/json: 
          schema: newDynamicItem
          example: !include examples/newDynamicItem-example.json
      responses: 
        201: 
          description: |
            Created
            Location: https://{subdomain}.zendesk.com/api/v2/dynamic_content/items/{id}.json
          body: 
            application/json: 
              schema: createItemResponse
              example: !include examples/createItemResponse-example.json
  /items: 
    /{id}{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: |
          Show item
        responses: 
          200: 
            description: |
              OK
              Location: https://{subdomain}.zendesk.com/api/v2/dynamic_content/items/{id}.json
            body: 
              application/json: 
                schema: showItemResponse
                example: !include examples/showItemResponse-example.json
      put: 
        description: Update item
        body: 
          application/json: 
            schema: dynamicContentUpdate
            example: !include examples/dynamicContentUpdate-example.json
        responses: 
          200: 
            description: |
              OK
              Location: https://{subdomain}.zendesk.com/api/v2/dynamic_content/items/{id}.json
            body: 
              application/json: 
                schema: showItemResponse
                example: !include examples/showItemResponse-example.json
      delete: 
        description: |
          Delete item
        responses: 
          200: 
    /{id}: 
      /variants{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: |
            Returns a list of all the variants for a dynamic content item for your account if accessed as an admin or agents who have permission to manage dynamic content.
             Allowed For: [Admins, Agents]
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: createManyVariantsResponse
                  example: !include examples/listVariantsResponse-example.json
        /variants: 
          /{id}{mediaTypeExtension}: 
            type: mediaTypeExtension
            get: 
              description: |
                Returns a list of all the variants for a dynamic content item for your account if accessed as an admin or agents who have permission to manage dynamic content.
                 Allowed For: [Admins, Agents]
              responses: 
                200: 
                  description: |
                    OK
                    Location: https://{subdomain}.zendesk.com/api/v2/dynamic_content/items/{id}/variants/{id}.json
                  body: 
                    application/json: 
                      schema: showVariantResponse
                      example: !include examples/showVariantResponse-example.json
            put: 
              description: |
                Returns a list of all the variants for a dynamic content item for your account if accessed as an admin or agents who have permission to manage dynamic content.
                Allowed For: [Admins, Agents]
              body: 
                application/json: 
                  schema: variantUpdateRequest
                  example: !include examples/variantUpdateRequest-example.json
              responses: 
                200: 
                  description: |
                    OK
                    Location: https://{subdomain}.zendesk.com/api/v2/dynamic_content/items/{id}/variants/{id}.json
                  body: 
                    application/json: 
                      schema: updateVariantResponse
                      example: !include examples/updateVariantResponse-example.json
            delete: 
              description: Delete Variant
              responses: 
                200: 
        /update_many{mediaTypeExtension}: 
          type: mediaTypeExtension
          put: 
            description: |
              Returns a list of all the variants for a dynamic content item for your account if accessed as an admin or agents who have permission to manage dynamic content.
              Allowed For: [Admins, Agents]
            body: 
              application/json: 
                schema: variantUpdateManyRequest
                example: !include examples/variantUpdateManyRequest-example.json
            responses: 
              200: 
                body: 
                  application/json: 
                    schema: variantUpdateManyResponse
                    example: !include examples/variantUpdateManyResponse-example.json
/end_users: 
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Show User
      responses: 
        200: 
          description: ""
          body: 
            application/json: 
              schema: showUserResponse
              example: !include examples/showUserResponse-example.json
    put: 
      description: Update User
      body: 
        application/json: 
          schema: endUserUpdate
          example: !include examples/endUserUpdate-example.json
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: showUserResponse
              example: !include examples/updateUserResponse-example.json
  /{user_id}: 
    /identities{mediaTypeExtension}: 
      type: mediaTypeExtension
      post: 
        description: |
          Add new identities for a given user id. An agent can add an identity to any user profile. An end-user can only add an identity to their own user profile.
           Allowed For: [Agents, Verified end-users]
        body: 
          application/json: 
            schema: endUserIdentity
            example: !include examples/endUserIdentity-example.json
        responses: 
          201: 
            description: |
              Created
              Location: https://{subdomain}.zendesk.com/api/v2/users/135/identities/78138.json
            body: 
              application/json: 
                schema: addUserIdentityResponse
                example: !include examples/addUserIdentityResponse-example.json
/forums{mediaTypeExtension}: 
  type: mediaTypeExtension
  uriParameters: 
    mediaTypeExtension: 
      displayName: mediaTypeExtension
      description: Media type
      required: true
      example: .json
  get: 
    description: List Forums
    responses: 
      200: 
        description: Retrive forum
  post: 
    description: Create forum
    body: 
      application/json: 
        schema: newForum
        example: !include examples/newForum-example.json
    responses: 
      201: 
        description: Forum create
        body: 
          application/json: 
            schema: createForumResponse
            example: !include examples/newForumResponse-example.json
/forums: 
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Show Forum
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: showForumResponse
              example: !include examples/showForumResponse-example.json
    put: 
      description: Update Forum
      body: 
        application/json: 
          schema: forumApdate
          example: !include examples/forumApdate-example.json
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: updateForumResponse
              example: !include examples/updateForumResponse-example.json
    delete: 
      description: Delete Forum
      responses: 
        200: 
  /{forum_id}: 
    /subscriptions{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: List Forum Subscriptions
        responses: 
          200: 
            body: 
              application/json: 
                schema: forumSubscriptionsRespons
                example: !include examples/forumSubscriptionsRespons-example.json
    /topics{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: List Topics
        responses: 
          200: 
            body: 
              application/json: 
                schema: forumTopicsResponse
                example: !include examples/forumTopicsResponse-example.json
/forum_subscriptions{mediaTypeExtension}: 
  type: mediaTypeExtension
  get: 
    description: List Forum Subscriptions
    responses: 
      200: 
  post: 
    description: Create Forum Subscription
    body: 
      application/json: 
        schema: newSubscription
        example: !include examples/newSubscription-example.json
    responses: 
      201: 
        body: 
          application/json: 
            schema: forumSubscriptionCreateResponse
            example: !include examples/forumSubscriptionCreateResponse-example.json
/users: 
  /{user_id}: 
    /forum_subscriptions{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: List Forum Subscriptions
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: listForumSubscriptionsResponse
                example: !include examples/listForumSubscriptionsResponse-example.json
    /groups{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: List Groups
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: showassignablegroupsResponse
                example: !include examples/listGroupsResponse-example.json
    /group_memberships{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: List Memberships
        responses: 
          200: 
            body: 
              application/json: 
                schema: groupMembershipResponse
                example: !include examples/groupMembershipResponse-example.json
      post: 
        description: |
          Creating a membership means assigning an agent to a given group
           Allowed For: [Admins]
        body: 
          application/json: 
            schema: newGroupMembership
            example: !include examples/newMembership-example.json
        responses: 
          201: 
            description: |
              Created
              Location: https://{subdomain}.zendesk.com/api/v2/group_memberships/{id}.json
            body: 
              application/json: 
                schema: createMembershipResponse
                example: !include examples/createMembershipResponse-example.json
    /group_memberships: 
      /{id}{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: Show Membership
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: createMembershipResponse
                  example: !include examples/showMembershipResponse-example.json
        delete: 
          description: |
            Immediately removes a user from a group and schedules a job to unassign all working tickets that are assigned to the given user and group combination
             Allowed For: [Admins]
          responses: 
            200: 
      /{id}: 
        /make_default{mediaTypeExtension}: 
          type: mediaTypeExtension
          put: 
            description: |
              Immediately removes a user from a group and schedules a job to unassign all working tickets that are assigned to the given user and group combination
               Allowed For: [Agents]
            responses: 
              200: 
                body: 
                  application/json: 
                    schema: listMembersipsResponse
                    example: !include examples/listMembersipsResponse-example.json
    /organizations{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: Listing Organizations
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: autocompleteOrganizationsResponse
                example: !include examples/listingOrganizationsResponse-example.json
    /organization_subscriptions{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: List Organization Subscriptions
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: listOrganizationSubscriptionsResponse
                example: !include examples/listOrganizationSubscriptionsResponse-example.json
    /tickets: 
      /requested{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: "Tickets are ordered chronologically by created date, from oldest to newest. Note: The first ticket listed may not be the absolute oldest ticket in your account due to ticket archiving. To get a list of all tickets in your account use the Incremental Ticket API"
          responses: 
            200: 
      /ccd{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: "Tickets are ordered chronologically by created date, from oldest to newest. Note: The first ticket listed may not be the absolute oldest ticket in your account due to ticket archiving. To get a list of all tickets in your account use the Incremental Ticket API"
          responses: 
            200: 
              body: 
                application/json: 
                  schema: ticketsListResponse
                  example: !include examples/ticketsListResponse-example.json
    /topic_comments: 
      /{id}{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: Show Topic Comment
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: showTopicCommentResponse
                  example: !include examples/showTopicCommentResponse-example.json
    /topic_subscriptions{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: List Topic Subscriptions
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: listTopicSubscriptionsResponse
                example: !include examples/listTopicSubscriptionsResponse-example.json
    /merge{mediaTypeExtension}: 
      type: merge
    /password{mediaTypeExtension}: 
      type: mediaTypeExtension
      post: 
        description: "An admin can set a user's password only if the setting is enabled under Settings > Security > Global. The setting is off by default"
        body: 
          application/json: 
            schema: newPasswordRequest
            example: !include examples/newPasswordRequest-example.json
        responses: 
          200: 
      put: 
        description: "You can only change your own password. Nobody can change the password of another user because it requires knowing the user's existing password. However, an admin can set a new password for another user without knowing the existing password. "
        body: 
          application/json: 
            schema: passwordUpdateRequest
            example: !include examples/passwordUpdateRequest-example.json
        responses: 
          200: 
    /identities{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: |
          Returns all user identities for a given user id
           Allowed For: [Agents]
        responses: 
          200: 
            body: 
              application/json: 
                schema: identitiesCreateResponse
                example: !include examples/identitiesCreateResponse-example.json
      post: 
        description: Shows the identity with the given id
        body: 
          application/json: 
            schema: identityCreateRequest
            example: !include examples/identityCreateRequest-example.json
        responses: 
          200: 
            body: 
              application/json: 
                schema: identityCreateResponse
                example: !include examples/identityCreateResponse-example.json
    /identities: 
      /{id}{mediaTypeExtension}: 
        type: mediaTypeExtension
        uriParameters: 
          id: 
            displayName: id
            description: ID
            required: true
            example: 56
          mediaTypeExtension: 
            displayName: mediaTypeExtension
            description: Media type
            required: true
            enum: [ .json ]
            example: .json
        get: 
          description: |
            Shows the identity with the given id
             Allowed For: [Agents]
          responses: 
            200: 
              body: 
                application/json: 
                  schema: identityResponse
                  example: !include examples/identityResponse-example.json
        put: 
          description: |
            This API method only allows you to set an identity as verified. You cannot otherwise change value of an identity but must create a new identity and delete the one you're replacing.
             Allowed For: [Agents]
          queryParameters: 
            identity[verified]: 
              description: Identity
              example: true
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: updateagivenUserIdentityResponse
                  example: !include examples/updateagivenUserIdentityResponse-example.json
        delete: 
          description: |
            Delete identity for a given user
             Allowed For: [Agents]
          responses: 
            200: 
      /{id}: 
        /make_primary: 
          type: mediaTypeExtension
          put: 
            description: |
              This API method only allows you to set an identity to primary. If you wish to change an identity, you create a new one with the correct value and delete the old one. This is a collection level operation and the correct behavior for an API client is to subsequently reload the entire collection.
               Allowed For: [Agents, End Users]
            responses: 
              200: 
                body: 
                  application/json: 
                    schema: userIdentityResponse
                    example: !include examples/userIdentityResponse-example.json
        /verify: 
          type: mediaTypeExtension
          put: 
            description: |
              This API method only allows you to set an identity as verified.
               Allowed For: [Agents, Agents]
            responses: 
              200: 
                body: 
                  application/json: 
                    schema: userIdentityResponse
                    example: !include examples/userIdentityResponse-example.json
    /requests{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        is: [ status ]
        description: Listing Requests
        responses: 
          200: 
            body: 
              application/json: 
                schema: userRequestsResponse
                example: !include examples/userRequestsResponse-example.json
    /topics{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: List Topics
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: forumTopicsResponse
                example: !include examples/forumTopicsResponse-example.json
    /topic_comments{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: List Topic Comments
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: listTopicCommentsResponse
                example: !include examples/listTopicCommentsResponse-example.json
    /topic_votes{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: Check for Vote
        responses: 
          200: 
            body: 
              application/json: 
                schema: topicVotesResponse
                example: !include examples/topicVotesResponse-example.json
    /related{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: Accepts a comma-separated list of user ids.
        responses: 
          200: 
            description: ""
            body: 
              application/json: 
                schema: userrelatedinformationResponse
                example: !include examples/userrelatedinformationResponse-example.json
  /me{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: 'Specify a partial or full name or email address as the value of the query attribute. Example: query="Gerry". Specify an id number as the value of the external_id attribute. For more advanced searches of users, use the Search API.'
      queryParameters: 
        include: 
          description: List of entities to be side-loaded. For performance reasons this tickets API does not allow last_audits to be side-loaded.
          example: abilities
      responses: 
        200: 
          description: ""
          body: 
            application/json: 
              schema: showUserResponse
              example: !include examples/showtheCurrentlyAuthenticatedUserResponse-example.json
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Show User
      responses: 
        200: 
          description: ""
          body: 
            application/json: 
              schema: showUserResponse
              example: !include examples/showUserResponse-example.json
    put: 
      description: |
        The user whose id is provided in the URL will be merged into the existing user provided in the params. Any two arbitrary users can be merged.
         Allowed For: [Agents, restrictions apply on certain actions]
      body: 
        application/json: 
          schema: endUserUpdate
          example: !include examples/userUpdate-example.json
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: updateUserResponse
              example: !include examples/updateUserResponse-example.json
    delete: 
      description: |
        The user whose id is provided in the URL will be merged into the existing user provided in the params. Any two arbitrary users can be merged.
         Allowed For: [Agents, restrictions apply on certain actions]
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: deleteUserResponse
              example: !include examples/deleteUserResponse-example.json
  /me: 
    /oauth: 
      /clients{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: List Clients
          responses: 
            200: 
              description: ""
              body: 
                application/json: 
                  schema: listClientsResponse
                  example: !include examples/listClientsResponse-example.json
    /merge{mediaTypeExtension}: 
      type: merge
  /show_many{mediaTypeExtension}: 
    type: createMany
  /create_many{mediaTypeExtension}: 
    type: createMany
    description: |
      The user whose id is provided in the URL will be merged into the existing user provided in the params. Any two arbitrary users can be merged.
              Allowed For: [Agents, restrictions apply on certain actions]
  /search{mediaTypeExtension}: 
    type: searchExternal
  /autocomplete{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      is: [ name ]
      description: |
        Specify a partial or full name or email address as the value of the query attribute. Example: query="Gerry". Specify an id number as the value of the external_id attribute. For more advanced searches of users, use the Search API.
         Allowed For: [Agents]
      responses: 
        200: 
          description: ""
          body: 
            application/json: 
              schema: listUsersResponse
              example: !include examples/autocompleteUsersResponse-example.json
/forum_subscriptions: 
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Show Forum Subscription
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: createForumSubscriptionResponse
              example: !include examples/showForumSubscriptionResponse-example.json
    delete: 
      description: Delete Forum Subscription
      responses: 
        200: 
/groups{mediaTypeExtension}: 
  type: mediaTypeExtension
  get: 
    description: List Groups
    responses: 
      200: 
        body: 
          application/json: 
            schema: showassignablegroupsResponse
            example: !include examples/groupsResponse-example.json
  post: 
    description: Create Group
    body: 
      application/json: 
        schema: newGroup
        example: !include examples/newGroup-example.json
    responses: 
      201: 
        body: 
          application/json: 
            schema: showGroupResponse
            example: !include examples/createGroup-example.json
/groups: 
  /assignable{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Show assignable groups
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: showassignablegroupsResponse
              example: !include examples/showassignablegroupsResponse-example.json
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Show Group
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: showGroupResponse
              example: !include examples/showGroupResponse-example.json
    put: 
      description: Update Groups
      body: 
        application/json: 
          schema: newGroup
          example: !include examples/updateGroup-example.json
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: showGroupResponse
              example: !include examples/updateGroupsResponse-example.json
    delete: 
      description: Delete Group
      responses: 
        200: 
  /{group_id}: 
    /memberships{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: List Memberships
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: listMembershipsResponse
                example: !include examples/listMembershipsResponse-example.json
    /memberships: 
      /assignable{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: List Assignable Memberships
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: listMembershipsResponse
                  example: !include examples/listAssignableMembershipsResponse-example.json
    /users{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: List Users
        responses: 
          200: 
            body: 
              application/json: 
                schema: usersResponse
                example: !include examples/usersResponse-example.json
/group_memberships{mediaTypeExtension}: 
  type: mediaTypeExtension
  get: 
    description: List Memberships
    responses: 
      200: 
        body: 
          application/json: 
            schema: listMembershipsResponse
            example: !include examples/groupMembershipResponse-example.json
  post: 
    description: Create Membership
    body: 
      application/json: 
        schema: newGroupMembership
        example: !include examples/newGroupMembership-example.json
    responses: 
      201: 
        body: 
          application/json: 
            schema: groupMembershipCreateResponse
            example: !include examples/groupMembershipCreateResponse-example.json
/group_memberships: 
  /assignable{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: List Assignable Memberships
      responses: 
        200: 
          body: 
            application/json: 
              schema: listMembershipsResponse
              example: !include examples/groupMembershipAssignable-example.json
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Show Membership
      responses: 
        200: 
          body: 
            application/json: 
              schema: createMembershipResponse
              example: !include examples/singleGroupMembership-example.json
    delete: 
      description: Delete membership
      responses: 
        200: 
/incremental: 
  /tickets{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Get information about tickets updated since a given point in time
      queryParameters: 
        start_time: 
          description: The time of the oldest ticket you are interested in. Tickets modified on or since this time will be returned. The start time is provided as the number of seconds since epoch UTC
          example: 1332034771
        include: 
          description: List of entities to be side-loaded. For performance reasons this tickets API does not allow last_audits to be side-loaded.
          example: users,group
      responses: 
        200: 
          body: 
            application/json: 
              schema: incrementalTicketExportResponse
              example: !include examples/incrementalTicket-example.json
  /ticket_events{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Get information about ticket events updated since a given point in time
      queryParameters: 
        start_time: 
          description: The time of the oldest ticket you are interested in. Tickets modified on or since this time will be returned. The start time is provided as the number of seconds since epoch UTC
          example: 1332034771
      responses: 
        200: 
          body: 
            application/json: 
              schema: ticketEventResponse
              example: !include examples/ticketEventResponse-example.json
  /organizations{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Get information about organizations updated since a given point in time
      queryParameters: 
        start_time: 
          description: The time of the oldest ticket you are interested in. Tickets modified on or since this time will be returned. The start time is provided as the number of seconds since epoch UTC
          example: 1332034771
      responses: 
        200: 
          body: 
            application/json: 
              schema: incrementalOrganizationsResponse
              example: !include examples/incrementalOrganizationsResponse-example.json
  /users{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Get information about users updated since a given point in time
      queryParameters: 
        start_time: 
          description: The time of the oldest ticket you are interested in. Tickets modified on or since this time will be returned. The start time is provided as the number of seconds since epoch UTC
          example: 1332034771
      responses: 
        200: 
          body: 
            application/json: 
              schema: incrementalUsersResponse
              example: !include examples/incrementalUsersResponse-example.json
/job_statuses: 
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: This shows the status of a background job.
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: showJobStatusResponse
              example: !include examples/showJobStatusResponse-example.json
/locales{mediaTypeExtension}: 
  type: mediaTypeExtension
  get: 
    description: This lists the translation locales that are available for the account.
    responses: 
      200: 
        description: OK
        body: 
          application/json: 
            schema: listLocalesResponse
            example: !include examples/listLocalesResponse-example.json
/locales: 
  /public{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: This lists the translation locales that are available to all accounts.
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: listLocalesResponse
              example: !include examples/listLocalesResponse-example.json
  /agent{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: This lists the translation locales that have been localized for agents.
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: listLocalesResponse
              example: !include examples/listLocalesResponse-example.json
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: |
        This lists the translation locales that have been localized for agents.
         Allowed For: [Anyone]
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: showLocaleResponse
              example: !include examples/showLocaleResponse-example.json
  /current{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: This works exactly like show, but instead of taking an id as argument, it renders the locale of the user performing the request.
      responses: 
        200: 
          body: 
            application/json: 
              schema: currentLocalesResponse
              example: !include examples/currentLocalesResponse-example.json
  /detect_best_locale{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: |
        This works exactly like show, but instead of taking an id as argument, it renders the locale of the user performing the request.
         Allowed For: [Anyone]
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: showLocaleResponse
              example: !include examples/detectbestlanguageforuserResponse-example.json
/macros{mediaTypeExtension}: 
  type: mediaTypeExtension
  uriParameters: 
    mediaTypeExtension: 
      displayName: mediaTypeExtension
      description: Media type
      required: true
      enum: [ .json ]
  get: 
    description: Lists all shared and personal macros available to the current user
    responses: 
      200: 
        description: OK
        body: 
          application/json: 
            schema: listactiveMacrosResponse
            example: !include examples/listMacrosResponse-example.json
  post: 
    description: Create macros
    body: 
      application/json: 
        schema: maicro
        example: !include examples/maicro-example.json
    responses: 
      201: 
        description: Create macros
        body: 
          application/json: 
            schema: updateMacroResponse
            example: !include examples/addMacros-example.json
/macros: 
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Lists all shared and personal macros available to the current user
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: gettingMacrosResponse
              example: !include examples/gettingMacrosResponse-example.json
    put: 
      description: Update macros
      body: 
        application/json: 
          schema: updateMacros
          example: !include examples/updateMacros-example.json
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: updateMacroResponse
              example: !include examples/updateMacroResponse-example.json
    delete: 
      description: |
        Delete macros
      responses: 
        200: 
  /active{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Lists all active shared and personal macros available to the current user
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: listactiveMacrosResponse
              example: !include examples/listactiveMacrosResponse-example.json
  /{id}: 
    /apply{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: Lists all active shared and personal macros available to the current user
        responses: 
          200: 
            body: 
              application/json: 
                schema: macrosApplyResponse
                example: !include examples/macrosApplyResponse-example.json
/channels: 
  /twitter: 
    /monitored_twitter_handles{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: Listing Monitored Twitter Handles
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: listingMonitoredTwitterHandlesResponse
                example: !include examples/listingMonitoredTwitterHandlesResponse-example.json
    /monitored_twitter_handles: 
      /{id}{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: Getting Monitored Twitter Handle
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: gettingMonitoredTwitterHandleResponse
                  example: !include examples/gettingMonitoredTwitterHandleResponse-example.json
    /tickets{mediaTypeExtension}: 
      type: mediaTypeExtension
      post: 
        description: |
          This end-point allows you to turn a tweet into a ticket. You must provide the tweet id as well as the id of a monitored twitter handle configured for your account.
           Allowed For: [Agents]
        body: 
          application/json: 
            schema: createTicketByTwitter
            example: !include examples/createTicketByTwitter-example.json
        responses: 
          200: 
    /tickets: 
      /{id}: 
        /statuses{mediaTypeExtension}: 
          type: mediaTypeExtension
          get: 
            description: Retrieve ticket status
            responses: 
              200: 
                description: OK
                body: 
                  application/json: 
                    schema: gettingTwicketstatusResponse
                    example: !include examples/gettingTwicketstatusResponse-example.json
  /voice: 
    /phone_numbers: 
      /search{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: Searching for Available Phone Numbers
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: searchingforAvailablePhoneNumbersResponse
                  example: !include examples/searchingforAvailablePhoneNumbersResponse-example.json
      /{id}{mediaTypeExtension}: 
        type: mediaTypeExtension
        put: 
          description: Updating Phone Numbers
          body: 
            application/json: 
              schema: updatingPhoneNumbersRequest
              example: !include examples/updatingPhoneNumbersRequest-example.json
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: updatingPhoneNumbersResponse
                  example: !include examples/updatingPhoneNumbersResponse-example.json
        get: 
          description: Getting Phone Numbers
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: creatingPhoneNumbersResponse
                  example: !include examples/gettingPhoneNumbersResponse-example.json
        delete: 
          description: Deleting Phone Numbers
          responses: 
            200: 
    /phone_numbers{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: Listing Phone Numbers
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: listingPhoneNumbersResponse
                example: !include examples/listingPhoneNumbersResponse-example.json
      post: 
        description: Creating Phone Numbers
        body: 
          application/json: 
            schema: phoneNumbers
            example: !include examples/phoneNumbers-example.json
        responses: 
          201: 
            description: Created
            body: 
              application/json: 
                schema: creatingPhoneNumbersResponse
                example: !include examples/creatingPhoneNumbersResponse-example.json
    /greeting_categories{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: Listing Greeting Categories
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: listingGreetingCategoriesResponse
                example: !include examples/listingGreetingCategoriesResponse-example.json
    /greetings{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: Listing Greetings
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: listingGreetingsResponse
                example: !include examples/listingGreetingsResponse-example.json
      post: 
        description: Creating Greetings
        body: 
          application/json: 
            schema: voiceGreetings
            example: !include examples/voiceGreetings-example.json
        responses: 
          201: 
            description: Created
            body: 
              application/json: 
                schema: creatingGreetingsResponse
                example: !include examples/creatingGreetingsResponse-example.json
    /greetings: 
      /{id}{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: Getting Greetings
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: creatingGreetingsResponse
                  example: !include examples/gettingGreetingsResponse-example.json
        put: 
          description: Updating Greetings
          body: 
            application/json: 
              schema: updatingGreetingsRequest
              example: !include examples/updatingGreetingsRequest-example.json
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: creatingGreetingsResponse
                  example: !include examples/updatingGreetingsResponse-example.json
        delete: 
          description: Deleting Greetings
          responses: 
            200: 
    /stats: 
      /current_queue_activity{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: Getting Statistics for Current Queue Activity
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: gettingStatisticsforCurrentQueueActivityResponse
                  example: !include examples/gettingStatisticsforCurrentQueueActivityResponse-example.json
      /historical_queue_activity{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: Getting Statistics for Historical Queue Activity
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: gettingStatisticsforHistoricalQueueActivityResponse
                  example: !include examples/gettingStatisticsforHistoricalQueueActivityResponse-example.json
      /agents_activity{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: Getting Statistics for Agents Activity
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: gettingStatisticsforAgentsActivityResponse
                  example: !include examples/gettingStatisticsforAgentsActivityResponse-example.json
    /availabilities: 
      /{id}{mediaTypeExtension}: 
        type: mediaTypeExtension
        put: 
          description: Updating Availability
          body: 
            application/json: 
              schema: updatingAvailabilityRequest
              example: !include examples/updatingAvailabilityRequest-example.json
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: updatingAvailabilityResponse
                  example: !include examples/updatingAvailabilityResponse-example.json
        get: 
          description: Getting Availability
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: updatingAvailabilityResponse
                  example: !include examples/gettingAvailabilityResponse-example.json
    /agents: 
      /{agent_id}: 
        /users: 
          /{user_id}: 
            /display{mediaTypeExtension}: 
              type: mediaTypeExtension
              post: 
                description: |
                  This end-point allows you to instruct an agent's browser to open a user's profile.
                   Allowed For: [Agents]
                responses: 
                  200: 
        /tickets: 
          /{ticket_id}: 
            /display{mediaTypeExtension}: 
              type: mediaTypeExtension
              post: 
                description: |
                  This end-point allows you to instruct an agent's browser to open a ticket.
                   Allowed For: [Agents]
                responses: 
                  200: 
    /tickets{mediaTypeExtension}: 
      type: mediaTypeExtension
      post: 
        description: |
          This end-point allows you to instruct an agent's browser to open a ticket.
           Allowed For: [Agents]
        body: 
          application/json: 
            schema: voiceTicketCreateRequest
            example: !include examples/voiceTicketCreateRequest-example.json
        responses: 
          201: 
            description: |
              Created
              Location: https://{subdomain}.zendesk.com/api/v2/tickets/{id}.json
            body: 
              application/json: 
                schema: creatingVoicemailTicketsResponse
                example: !include examples/creatingVoicemailTicketsResponse-example.json
    /greeting_categories: 
      /{id}{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: Getting Greeting Category
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: gettingGreetingCategoryResponse
                  example: !include examples/gettingGreetingCategoryResponse-example.json
/oauth: 
  /clients{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: List Clients
      responses: 
        200: 
          description: ""
          body: 
            application/json: 
              schema: listClientsResponse
              example: !include examples/listClientsResponse-example.json
    post: 
      description: Create Client
      body: 
        application/json: 
          schema: oauthClientCreate
          example: !include examples/oauthClientCreate-example.json
      responses: 
        201: 
          description: Created
          body: 
            application/json: 
              schema: createClientResponse
              example: !include examples/createClientResponse-example.json
  /clients: 
    /{id}{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: Show Client
        responses: 
          200: 
            description: ""
            body: 
              application/json: 
                schema: showClientResponse
                example: !include examples/showClientResponse-example.json
      put: 
        description: Update Client
        body: 
          application/json: 
            schema: oauth
            example: !include examples/oauth-example.json
        responses: 
          200: 
            description: ""
            body: 
              application/json: 
                schema: createClientResponse
                example: !include examples/updateClientResponse-example.json
      delete: 
        description: Delete Client
        responses: 
          200: 
  /tokens{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: List Tokens
      responses: 
        200: 
          description: ""
          body: 
            application/json: 
              schema: listTokensResponse
              example: !include examples/listTokensResponse-example.json
  /tokens: 
    /{id}{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: Show Token
        responses: 
          200: 
            description: ""
            body: 
              application/json: 
                schema: showTokenResponse
                example: !include examples/showTokenResponse-example.json
      delete: 
        description: Revoke Token
        responses: 
          200: 
    /current{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: Show current Token
        responses: 
          200: 
            description: ""
            body: 
              application/json: 
                schema: showTokenResponse
                example: !include examples/showTokenResponse-example.json
/organizations{mediaTypeExtension}: 
  type: mediaTypeExtension
  get: 
    description: Listing Organizations
    responses: 
      200: 
        body: 
          application/json: 
            schema: organizationsListResponse
            example: !include examples/organizationsListResponse-example.json
  post: 
    description: Creating Organizations
    body: 
      application/json: 
        schema: newOrganization
        example: !include examples/newOrganization-example.json
    responses: 
      201: 
        body: 
          application/json: 
            schema: organizationCreateResponse
            example: !include examples/organizationCreateResponse-example.json
/organizations: 
  /autocomplete{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      is: [ name ]
      description: |
        Returns an array of organizations whose name starts with the value specified in the name parameter. The name must be at least 2 characters in length.
         Allowed For: [Agents]
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: autocompleteOrganizationsResponse
              example: !include examples/autocompleteOrganizationsResponse-example.json
  /{id}: 
    /related{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: Returns an array of organizations whose name starts with the value specified in the name parameter. The name must be at least 2 characters in length.
        responses: 
          200: 
            description: ""
            body: 
              application/json: 
                schema: organizationrelatedinformationResponse
                example: !include examples/organizationrelatedinformationResponse-example.json
    /requests{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: Listing Requests
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: searchingrequestsResponse
                example: !include examples/listingRequestsResponse-example.json
    /tags{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: Lists the most popular recent tags in decreasing popularity
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: showTagsResponse
                example: !include examples/showTagsResponse-example.json
      post: 
        description: Create tag
        body: 
          application/json: 
            schema: showTagsResponse
            example: !include examples/createOrganizationTag-example.json
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: showTagsResponse
                example: !include examples/createOrganizationTag-example.json
      put: 
        description: Update tag
        body: 
          application/json: 
            schema: showTagsResponse
            example: !include examples/updateOrganizationTags-example.json
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: showTagsResponse
                example: !include examples/addTagsResponse-example.json
      delete: 
        description: Delete tag
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: showTagsResponse
                example: !include examples/createOrganizationTag-example.json
    /users{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: List Users
        responses: 
          200: 
            description: ""
            body: 
              application/json: 
                schema: listUsersResponse
                example: !include examples/listUsersResponse-example.json
    /subscriptions{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: List Organization Subscriptions
        responses: 
          200: 
            body: 
              application/json: 
                schema: organizationSubscriptionsResponse
                example: !include examples/organizationSubscriptionsResponse-example.json
    /tickets{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: "Tickets are ordered chronologically by created date, from oldest to newest. Note: The first ticket listed may not be the absolute oldest ticket in your account due to ticket archiving. To get a list of all tickets in your account use the Incremental Ticket API"
        responses: 
          200: 
            body: 
              application/json: 
                schema: listingTicketsResponse
                example: !include examples/singleOrganizationTickets-example.json
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: |
        Returns an array of organizations whose name starts with the value specified in the name parameter. The name must be at least 2 characters in length.
         Allowed For: [Admins, Agents]
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: creatingOrganizationsResponse
              example: !include examples/gettingOrganizationsResponse-example.json
    put: 
      description: |
        Update organization
      body: 
        application/json: 
          schema: updatingOrganizationsRequest
          example: !include examples/updatingOrganizationsRequest-example.json
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: creatingOrganizationsResponse
              example: !include examples/updatingOrganizationsResponse-example.json
    delete: 
      description: Delete organization
      responses: 
        200: 
  /create_many{mediaTypeExtension}: 
    type: createMany
    description: |
      Returns an array of organizations whose name starts with the value specified in the name parameter. The name must be at least 2 characters in length.
             Allowed For: [Agents, restrictions apply on certain actions]
  /search{mediaTypeExtension}: 
    type: searchExternal
/organization_fields{mediaTypeExtension}: 
  type: mediaTypeExtension
  get: 
    description: |
      Returns a list of all custom Organization Fields in your account. Fields are returned in the order that you specify in your Organization Fields configuration in Zendesk. Clients should cache this resource for the duration of their API usage and map the key for each Organization Field to the values returned under the organization_fields attribute on the Organization resource.
       Allowed For: [Agents]
    responses: 
      200: 
        description: OK
        body: 
          application/json: 
            schema: listOrganizationFieldsResponse
            example: !include examples/listOrganizationFieldsResponse-example.json
  post: 
    description: Create Organization Fields
    body: 
      application/json: 
        schema: newOrgField
        example: !include examples/newOrgField-example.json
    responses: 
      201: 
/organization_fields: 
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: |
        Returns a list of all custom Organization Fields in your account. Fields are returned in the order that you specify in your Organization Fields configuration in Zendesk. Clients should cache this resource for the duration of their API usage and map the key for each Organization Field to the values returned under the organization_fields attribute on the Organization resource.
         Allowed For: [Agents]
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: listOrganizationFieldsResponse
              example: !include examples/showOrganizationFieldResponse-example.json
    put: 
      description: |
        Update organizations field
        Types of custom fields that can be created are:text (default when no "type" is specified) textarea checkbox date integer decimal regexp tagger (custom dropdown)
         Allowed For: [Admins]
      body: 
        application/json: 
          schema: updateOrgField
          example: !include examples/updateOrgField-example.json
      responses: 
        200: 
          description: |
            OK
            Location: https://{subdomain}.zendesk.com/api/v2/organization_fields/75.json
          body: 
            application/json: 
              schema: createOrganizationFieldsResponse
              example: !include examples/updateOrganizationFieldsResponse-example.json
    delete: 
      description: Delete organizations field
      responses: 
        200: 
/user_fields: 
  /reorder{mediaTypeExtension}: 
    type: mediaTypeExtension
    put: 
      description: |
        Types of custom fields that can be created are:text (default when no "type" is specified) textarea checkbox date integer decimal regexp tagger (custom dropdown)
         Allowed For: [Admins]
      body: 
        application/json: 
          schema: userFieldsReoder
          example: !include examples/userFieldsReoder-example.json
      responses: 
        200: 
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: |
        Returns a list of all custom User Fields in your account. Fields are returned in the order that you specify in your User Fields configuration in Zendesk. Clients should cache this resource for the duration of their API usage and map the key for each User Field to the values returned under the user_fields attribute on the User resource.
         Allowed For: [Agents]
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: createUserFieldsResponse
              example: !include examples/showUserFieldResponse-example.json
    put: 
      description: |
        Types of custom fields that can be created are:text (default when no "type" is specified) textarea checkbox date integer decimal regexp tagger (custom dropdown)
         Allowed For: [Admins]
      body: 
        application/json: 
          schema: updateUserField
          example: !include examples/updateUserField-example.json
      responses: 
        200: 
          description: |
            OK
            Location: https://{subdomain}.zendesk.com/api/v2/user_fields/75.json
          body: 
            application/json: 
              schema: createUserFieldsResponse
              example: !include examples/updateUserFieldsResponse-example.json
    delete: 
      description: |
        Types of custom fields that can be created are:text (default when no "type" is specified) textarea checkbox date integer decimal regexp tagger (custom dropdown)
         Allowed For: [Admins]
      responses: 
        200: 
/organization_subscriptions{mediaTypeExtension}: 
  type: mediaTypeExtension
  get: 
    description: List Organization Subscriptions
    responses: 
      200: 
        description: ""
        body: 
          application/json: 
            schema: organizationSubscriptionsResponse
            example: !include examples/organizationSubscriptionsResponse-example.json
  post: 
    description: Create Organization Subscription
    body: 
      application/json: 
        schema: orgSubscription
        example: !include examples/orgSubscription-example.json
    responses: 
      201: 
        body: 
          application/json: 
            schema: organiziationSubscriptionResponse
            example: !include examples/organiziationSubscriptionResponse-example.json
/organization_subscriptions: 
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Show Organization Subscription
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: showOrganizationSubscriptionResponse
              example: !include examples/showOrganizationSubscriptionResponse-example.json
    delete: 
      description: Delete Organization Subscription
      responses: 
        200: 
/requests{mediaTypeExtension}: 
  type: mediaTypeExtension
  get: 
    description: Listing Requests
    queryParameters: 
      status: 
        description: Status
        example: hold,open
    responses: 
      200: 
        body: 
          application/json: 
            schema: requestsResponse
            example: !include examples/requestsResponse-example.json
  post: 
    description: Creating Requests
    body: 
      application/json: 
        schema: newRequest
        example: !include examples/newRequest-example.json
    responses: 
      201: 
        body: 
          application/json: 
            schema: gettingRequestsResponse
            example: !include examples/createRequest-example.json
/requests: 
  /open{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      is: [ status ]
      description: Listing Requests
      responses: 
        200: 
          body: 
            application/json: 
              schema: searchingrequestsResponse
              example: !include examples/ccdRequest-example.json
  /solved{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      is: [ status ]
      description: Listing Requests
      responses: 
        200: 
          body: 
            application/json: 
              schema: searchingrequestsResponse
              example: !include examples/ccdRequest-example.json
  /ccd{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      is: [ status ]
      description: ccd requests
      responses: 
        200: 
          body: 
            application/json: 
              schema: searchingrequestsResponse
              example: !include examples/ccdRequest-example.json
  /search{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      is: [ status , query ]
      description: Searching requests
      queryParameters: 
        organization_id: 
          description: Organization id
          example: 1
        cc_id: 
          example: true
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: searchingrequestsResponse
              example: !include examples/searchingrequestsResponse-example.json
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Getting Requests
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: gettingRequestsResponse
              example: !include examples/gettingRequestsResponse-example.json
    put: 
      description: Updating Requests
      body: 
        application/json: 
          schema: updateRequest
          example: !include examples/updateRequest-example.json
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: gettingRequestsResponse
              example: !include examples/createRequest-example.json
  /{id}: 
    /comments{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: Listing Comments
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: listCommentsResponse
                example: !include examples/listCommentsResponse-example.json
    /comments: 
      /{id}{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: Getting Comment
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: gettingCommentsResponse
                  example: !include examples/gettingCommentsResponse-example.json
/satisfaction_ratings{mediaTypeExtension}: 
  type: mediaTypeExtension
  get: 
    description: 'Lists all received satisfaction rating requests ever issued for your account. To only list the satisfaction ratings submitted by your customers, use the "received" end point below instead.'
    responses: 
      200: 
        description: OK
        body: 
          application/json: 
            schema: listSatisfactionRatingsResponse
            example: !include examples/listSatisfactionRatingsResponse-example.json
/satisfaction_ratings: 
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Show satisfaction rating
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: showSatisfactionRatingResponse
              example: !include examples/showSatisfactionRatingResponse-example.json
/search{mediaTypeExtension}: 
  type: search
/portal: 
  /search{mediaTypeExtension}: 
    type: search
    description: This resource behaves the same as /api/v2/search, but lets anonymous users search public forums. The endpoint searches only articles, not tickets, and returns only articles that the requesting user is allowed to see.
/sharing_agreements{mediaTypeExtension}: 
  type: mediaTypeExtension
  get: 
    description: List Sharing Agreements
    responses: 
      200: 
        description: OK
        body: 
          application/json: 
            schema: listSharingAgreementsResponse
            example: !include examples/listSharingAgreementsResponse-example.json
/recipient_addresses{mediaTypeExtension}: 
  type: mediaTypeExtension
  get: 
    description: Listing Recipient Addresses
    responses: 
      200: 
        description: OK
        body: 
          application/json: 
            schema: listingRecipientAddressesResponse
            example: !include examples/listingRecipientAddressesResponse-example.json
  post: 
    description: Create Recipient Addresses
    body: 
      application/json: 
        schema: newAddress
        example: !include examples/newAddress-example.json
    responses: 
      201: 
        body: 
          application/json: 
            schema: createRequestResponse
            example: !include examples/createRequestResponse-example.json
/recipient_addresses: 
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Show Recipient Address
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: createRecipientAddressesResponse
              example: !include examples/showRecipientAddressResponse-example.json
    put: 
      description: Update Recipient Address
      body: 
        application/json: 
          schema: recipientAddressUpdate
          example: !include examples/recipientAddressUpdate-example.json
      responses: 
        200: 
          description: |
            OK
            Location: https://{subdomain}.zendesk.com/api/v2/recipient_addresses/47.json
          body: 
            application/json: 
              schema: createRecipientAddressesResponse
              example: !include examples/updateRecipientAddressResponse-example.json
    delete: 
      description: Delete Recipient Address
      responses: 
        200: 
  /{id}: 
    /verify{mediaTypeExtension}: 
      type: mediaTypeExtension
      put: 
        description: Verify Recipient Address
        body: 
          application/json: 
            schema: recipientVerify
            example: !include examples/recipientVerify-example.json
        responses: 
          200: 
/suspended_tickets{mediaTypeExtension}: 
  type: mediaTypeExtension
  get: 
    description: Listing Suspended Tickets
    responses: 
      200: 
        description: OK
        body: 
          application/json: 
            schema: listingSuspendedTicketsResponse
            example: !include examples/listingSuspendedTicketsResponse-example.json
/suspended_tickets: 
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Getting Suspended Tickets
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: gettingSuspendedTicketsResponse
              example: !include examples/gettingSuspendedTicketsResponse-example.json
    delete: 
      description: |
        Delete suspend tickets
        Note: Suspended tickets that fail to be recovered will be included in the response.
         Allowed For: [Unrestricted Agents]
      responses: 
        200: 
  /{id}: 
    /recover{mediaTypeExtension}: 
      type: mediaTypeExtension
      put: 
        description: |
          Recover susepend ticket
          Note: During recovery, the API sets the requester to the authenticated agent who called the API, not the original requester. This prevents the ticket from being re-suspended after recovery. To preserve the original requester, GET the suspended ticket before recovery and grab the author value.
           Allowed For: [Unrestricted Agents]
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: creatingTicketsResponse
                example: !include examples/recoveringSuspendedTicketsResponse-example.json
  /recover_many{mediaTypeExtension}: 
    type: mediaTypeExtension
    put: 
      is: [ ids ]
      description: |
        Recover tickets
        Note: Suspended tickets that fail to be recovered will be included in the response.
         Allowed For: [Unrestricted Agents]
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: listingTicketsResponse
              example: !include examples/recoveringMultipleSuspendedTicketsResponse-example.json
  /destroy_many{mediaTypeExtension}: 
    type: mediaTypeExtension
    delete: 
      is: [ ids ]
      description: Delete tickets
      responses: 
        200: 
/tags{mediaTypeExtension}: 
  type: mediaTypeExtension
  get: 
    description: Lists the most popular recent tags in decreasing popularity
    responses: 
      200: 
        description: OK
        body: 
          application/json: 
            schema: listTagsResponse
            example: !include examples/listTagsResponse-example.json
/topics: 
  /{id}: 
    /tags{mediaTypeExtension}: 
      type: tags
    /comments{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: List Topic Comments
        responses: 
          200: 
            body: 
              application/json: 
                schema: topicCommentsResponse
                example: !include examples/topicCommentsResponse-example.json
      post: 
        description: Create Topic Comment
        body: 
          application/json: 
            schema: createTopicComment
            example: !include examples/createTopicComment-example.json
        responses: 
          201: 
            description: |
              Created
              Location: https://{subdomain}.zendesk.com/api/v2/topics/{topic_id}/comments/{id}.json
            body: 
              application/json: 
                schema: showTopicCommentResponse
                example: !include examples/createTopicCommentResponse-example.json
    /votes{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: Check for Vote
        responses: 
          200: 
            body: 
              application/json: 
                schema: topicVotesResponse
                example: !include examples/topicVotesResponse-example.json
    /vote{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: Check for Vote
        responses: 
          200: 
            body: 
              application/json: 
                schema: topicVoteResponse
                example: !include examples/topicVoteResponse-example.json
      post: 
        description: Create Vote
        responses: 
          201: 
            description: |
              Created
              Location: https://{subdomain}.zendesk.com/api/v2/topics/{id}.json
            body: 
              application/json: 
                schema: createVoteResponse
                example: !include examples/createVoteResponse-example.json
      delete: 
        description: Delete Vote
        responses: 
          200: 
    /comments: 
      /{id}{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: Show Topic Comment
          responses: 
            200: 
              body: 
                application/json: 
                  schema: topicSingleCommentResponse
                  example: !include examples/topicSingleCommentResponse-example.json
        put: 
          description: Creates a comment without sending out notifications. Allows setting created_at and updated_at.
          body: 
            application/json: 
              schema: createTopicComment
              example: !include examples/updatTopicComment-example.json
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: showTopicCommentResponse
                  example: !include examples/updateTopicCommentResponse-example.json
        delete: 
          description: Delete comment
          responses: 
            200: 
    /subscriptions{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: List Topic Subscriptions
        responses: 
          200: 
            body: 
              application/json: 
                schema: topicSubscriptionsResponse
                example: !include examples/topicSubscriptionsResponse-example.json
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Show Topic
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: updateTopicResponse
              example: !include examples/showTopicResponse-example.json
    put: 
      description: Update topic
      body: 
        application/json: 
          schema: updateTopicRequest
          example: !include examples/updateTopicRequest-example.json
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: updateTopicResponse
              example: !include examples/updateTopicResponse-example.json
    delete: 
      description: |
        Delete topic
      responses: 
        200: 
  /show_many{mediaTypeExtension}: 
    type: mediaTypeExtension
    post: 
      is: [ ids ]
      description: Show topics. Accepts a comma separated list of topic ids to return.
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: forumTopicsResponse
              example: !include examples/forumTopicsResponse-example.json
/targets{mediaTypeExtension}: 
  type: mediaTypeExtension
  get: 
    description: List Targets
    responses: 
      200: 
        description: OK
        body: 
          application/json: 
            schema: listTargetsResponse
            example: !include examples/listTargetsResponse-example.json
  post: 
    description: Create Target
    body: 
      application/json: 
        schema: newTarget
        example: !include examples/newTarget-example.json
    responses: 
      201: 
        body: 
          application/json: 
            schema: targetCreateResponse
            example: !include examples/targetCreateResponse-example.json
/targets: 
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Show Target
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: showTargetResponse
              example: !include examples/showTargetResponse-example.json
    put: 
      description: Update Target
      body: 
        application/json: 
          schema: updateTarget
          example: !include examples/updateTarget-example.json
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: updateTargetResponse
              example: !include examples/updateTargetResponse-example.json
    delete: 
      description: Delete Target
      responses: 
        200: 
/tickets{mediaTypeExtension}: 
  type: mediaTypeExtension
  get: 
    description: |
      Tickets are ordered chronologically by created date, from oldest to newest. Note: The first ticket listed may not be the absolute oldest ticket in your account due to ticket archiving. To get a list of all tickets in your account use the Incremental Ticket API
       Allowed For: [Admins]
    responses: 
      200: 
  post: 
    description: Creating Tickets
    body: 
      application/json: 
        schema: newTicketResponse
        example: !include examples/newTicketResponse-example.json
    responses: 
      201: 
        body: 
          application/json: 
            schema: newTicketResponse
            example: !include examples/newTicketResponse-example.json
/problems{mediaTypeExtension}: 
  type: mediaTypeExtension
  get: 
    description: |
      List problems. Accepts a comma-separated list of up to 100 ticket ids.
       Allowed For: [Agents]
    responses: 
      200: 
        body: 
          application/json: 
            schema: autocompleteProblemsResponse
            example: !include examples/ticketPromlems-example.json
/problems: 
  /autocomplete{mediaTypeExtension}: 
    type: mediaTypeExtension
    post: 
      description: |
        Problems autocomplete. Accepts a comma-separated list of up to 100 ticket ids.
         Allowed For: [Agents]
      queryParameters: 
        text: 
          description: Text
          example: txt
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: autocompleteProblemsResponse
              example: !include examples/autocompleteProblemsResponse-example.json
/exports: 
  /tickets{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Incremental Ticket Export
      queryParameters: 
        start_time: 
          description: Start time
          example: 1332034771
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: incrementalTicketExportResponse
              example: !include examples/incrementalTicketExportResponse-example.json
  /tickets: 
    /sample{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: "This endpoint is meant to be used only for testing the incremental export format. It's more relaxed in terms of rate limiting, but will only return up to 50 records. Other than this, it's identical to the above API."
        queryParameters: 
          start_time: 
            description: Start time
            example: 1332034771
        responses: 
          200: 
/ticket_fields{mediaTypeExtension}: 
  type: mediaTypeExtension
  get: 
    description: |
      Returns a list of all ticket fields in your account. Fields are returned in the order that you specify in your Ticket Fields configuration in Zendesk. Clients should cache this resource for the duration of their API usage and map the id for each ticket field to the values returned under the fields attributes on the Ticket resource.
       Allowed For: [Agents]
    responses: 
      200: 
        description: OK
        body: 
          application/json: 
            schema: listTicketFieldsResponse
            example: !include examples/listTicketFieldsResponse-example.json
  post: 
    description: Create Ticket Field
    body: 
      application/json: 
        schema: newTicketField
        example: !include examples/newTicketField-example.json
    responses: 
      201: 
        body: 
          application/json: 
            schema: ticketFieldCreateResponse
            example: !include examples/ticketFieldCreateResponse-example.json
/ticket_fields: 
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: |
        Returns a list of all ticket fields in your account. Fields are returned in the order that you specify in your Ticket Fields configuration in Zendesk. Clients should cache this resource for the duration of their API usage and map the id for each ticket field to the values returned under the fields attributes on the Ticket resource.
         Allowed For: [Agents]
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: updateTicketFieldsResponse
              example: !include examples/showTicketFieldResponse-example.json
    put: 
      description: |
        Update ticket field. Types of custom fields that can be created are:text (default when no "type" is specified) textarea checkbox date integer decimal regexp tagger (custom dropdown)
         Allowed For: [Admins]
      body: 
        application/json: 
          schema: updateTicketField
          example: !include examples/updateTicketField-example.json
      responses: 
        200: 
          description: |
            OK
            Location: https://{subdomain}.zendesk.com/api/v2/ticket_fields/89.json
          body: 
            application/json: 
              schema: updateTicketFieldsResponse
              example: !include examples/updateTicketFieldsResponse-example.json
    delete: 
      description: Delete ticket field
      responses: 
        200: 
/ticket_forms{mediaTypeExtension}: 
  type: mediaTypeExtension
  get: 
    description: |
      Returns a list of all ticket forms for your account if accessed as an admin or agent. End users will only see the list of ticket forms that are marked 'end_user_visible'.
       Allowed For: [Admins, Agents, End Users]
    responses: 
      200: 
        description: OK
        body: 
          application/json: 
            schema: listTicketFormsResponse
            example: !include examples/listTicketFormsResponse-example.json
  post: 
    description: Create Ticket Forms
    body: 
      application/json: 
        schema: newTicketForm
        example: !include examples/newTicketForm-example.json
    responses: 
      201: 
        body: 
          application/json: 
            schema: createTicketFormsResponse
            example: !include examples/newTicketFormRenponse-example.json
/ticket_forms: 
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: |
        Returns a list of all ticket forms for your account if accessed as an admin or agent. End users will only see the list of ticket forms that are marked 'end_user_visible'.
         Allowed For: [Admins, Agents, and End Users]
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: createTicketFormsResponse
              example: !include examples/showTicketFormResponse-example.json
    put: 
      description: |
        Update ticket form.
         Allowed For: [Admins]
      body: 
        application/json: 
          schema: updateTicketForm
          example: !include examples/updateTicketForm-example.json
      responses: 
        200: 
          description: |
            OK
            Location: https://{subdomain}.zendesk.com/api/v2/ticket_forms/47.json
          body: 
            application/json: 
              schema: createTicketFormsResponse
              example: !include examples/updateTicketFormsResponse-example.json
    delete: 
      description: |
        Delete ticket form.
         Allowed For: [Admins]
      responses: 
        200: 
  /reorder{mediaTypeExtension}: 
    type: mediaTypeExtension
    put: 
      description: |
        Reoder ticket forms.
         Allowed For: [Admins]
      body: 
        application/json: 
          schema: reoderTicketForms
          example: !include examples/reoderTicketForms-example.json
      responses: 
        200: 
  /{id}: 
    /clone{mediaTypeExtension}: 
      type: mediaTypeExtension
      post: 
        description: |
          Clone ticket forms.
           Allowed For: [Admins]
        responses: 
          201: 
            description: |
              Created
              Location: https://{subdomain}.zendesk.com/api/v2/ticket_forms/55.json
            body: 
              application/json: 
                schema: createTicketFormsResponse
                example: !include examples/cloneanalreadyexistingticketformResponse-example.json
/imports: 
  /tickets{mediaTypeExtension}: 
    type: mediaTypeExtension
    post: 
      description: Ticket Import
      body: 
        application/json: 
          schema: newImport
          example: !include examples/newImport-example.json
      responses: 
        201: 
          description: |
            Created
            Location: https://{subdomain}.zendesk.com/api/v2/tickets/{id}.json
          body: 
            application/json: 
              schema: creatingTicketsResponse
              example: !include examples/ticketImportResponse-example.json
/ticket_metrics{mediaTypeExtension}: 
  type: mediaTypeExtension
  get: 
    description: Listing Ticket Metrics
    responses: 
      200: 
        description: OK
        body: 
          application/json: 
            schema: listingTicketMetricsResponse
            example: !include examples/listingTicketMetricsResponse-example.json
/ticket_metrics: 
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Getting Ticket Metrics
      responses: 
        200: 
          body: 
            application/json: 
              schema: gettingTicketMetricsResponse
              example: !include examples/singleTicketMetric-example.json
/topics{mediaTypeExtension}: 
  type: mediaTypeExtension
  get: 
    description: List Topics
    responses: 
      200: 
        body: 
          application/json: 
            schema: topicsResponse
            example: !include examples/topicsResponse-example.json
  post: 
    description: Create Topic
    body: 
      application/json: 
        schema: newTopics
        example: !include examples/newTopics-example.json
    responses: 
      201: 
        body: 
          application/json: 
            schema: updateTopicResponse
            example: !include examples/newTopicsResponse-example.json
/import: 
  /topics{mediaTypeExtension}: 
    type: mediaTypeExtension
    post: 
      description: |
        Creates a topic without sending out notifications. Allows setting created_at and updated_at.
         Allowed For: [Admins]
      body: 
        application/json: 
          schema: newTopics
          example: !include examples/importTopics-example.json
      responses: 
        200: 
          body: 
            application/json: 
              schema: updateTopicResponse
              example: !include examples/updateTopicResponse-example.json
  /topics: 
    /{id}: 
      /comments{mediaTypeExtension}: 
        type: mediaTypeExtension
        post: 
          description: |
            Creates a comment without sending out notifications. Allows setting created_at and updated_at.
             Allowed For: [Admins]
          body: 
            application/json: 
              schema: createTopicComment
              example: !include examples/importTopicComment-example.json
          responses: 
            200: 
              body: 
                application/json: 
                  schema: topicCommentCreateResponse
                  example: !include examples/topicCommentCreateResponse-example.json
/topic_subscriptions{mediaTypeExtension}: 
  type: mediaTypeExtension
  get: 
    description: List Topic Subscriptions
    responses: 
      200: 
        body: 
          application/json: 
            schema: topicSubscriptionsCreateResponse
            example: !include examples/topicSubscriptionsCreateResponse-example.json
  post: 
    description: Create Topic Subscription
    body: 
      application/json: 
        schema: newTopicSubscription
        example: !include examples/newTopicSubscription-example.json
    responses: 
      201: 
        body: 
          application/json: 
            schema: newTopicSubscription
            example: !include examples/newTopicSubscription-example.json
/topic_subscriptions: 
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Show Topic Subscription
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: createTopicSubscriptionResponse
              example: !include examples/showTopicSubscriptionResponse-example.json
    delete: 
      description: Delete Topic Subscription
      responses: 
        200: 
/triggers{mediaTypeExtension}: 
  type: mediaTypeExtension
  get: 
    description: Lists all triggers for the current account
    responses: 
      200: 
        description: OK
        body: 
          application/json: 
            schema: listTriggersResponse
            example: !include examples/listTriggersResponse-example.json
  post: 
    description: Create Trigger
    body: 
      application/json: 
        schema: newTriggers
        example: !include examples/newTriggers-example.json
    responses: 
      201: 
        body: 
          application/json: 
            schema: createTriggerResponse
            example: !include examples/newTriggersResponse-example.json
/triggers: 
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Lists all triggers for the current account
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: gettingTriggersResponse
              example: !include examples/gettingTriggersResponse-example.json
    put: 
      description: |
        Update trigger
      body: 
        application/json: 
          schema: triggerUpdate
          example: !include examples/triggerUpdate-example.json
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: createTriggerResponse
              example: !include examples/updateTriggerResponse-example.json
    delete: 
      description: |
        Delete tringger.
         Allowed For: [Agents]
      responses: 
        200: 
  /active{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Lists all active triggers
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: listactiveTriggersResponse
              example: !include examples/listactiveTriggersResponse-example.json
  /reorder{mediaTypeExtension}: 
    type: mediaTypeExtension
    put: 
      description: Reorder triggers
      body: 
        application/json: 
          schema: triggerReorder
          example: !include examples/triggerReorder-example.json
      responses: 
        200: 
          description: Ok
/users{mediaTypeExtension}: 
  type: mediaTypeExtension
  get: 
    description: List Users
    responses: 
      200: 
        body: 
          application/json: 
            schema: usersReponse
            example: !include examples/usersReponse-example.json
  post: 
    description: Create User
    body: 
      application/json: 
        schema: newUser
        example: !include examples/newUser-example.json
    responses: 
      201: 
        body: 
          application/json: 
            schema: showUserResponse
            example: !include examples/newUserResponse-example.json
/user_fields{mediaTypeExtension}: 
  type: mediaTypeExtension
  get: 
    description: |
      Returns a list of all custom User Fields in your account. Fields are returned in the order that you specify in your User Fields configuration in Zendesk. Clients should cache this resource for the duration of their API usage and map the key for each User Field to the values returned under the user_fields attribute on the User resource.
       Allowed For: [Agents]
    responses: 
      200: 
        description: OK
        body: 
          application/json: 
            schema: listUserFieldsResponse
            example: !include examples/listUserFieldsResponse-example.json
  post: 
    description: Create User Fields
    body: 
      application/json: 
        schema: newUserField
        example: !include examples/newUserField-example.json
    responses: 
      201: 
        body: 
          application/json: 
            schema: newUserField
            example: !include examples/newUserField-example.json
/views{mediaTypeExtension}: 
  type: mediaTypeExtension
  uriParameters: 
    mediaTypeExtension: 
      displayName: mediaTypeExtension
      description: Media type
      required: true
  get: 
    description: Lists shared and personal Views available to the current user
    responses: 
      200: 
        description: OK
        body: 
          application/json: 
            schema: listViewsResponse
            example: !include examples/listViewsResponse-example.json
  post: 
    description: Create view
    body: 
      application/json: 
        schema: newView
        example: !include examples/newView-example.json
    responses: 
      201: 
        body: 
          application/json: 
            schema: updateViewResponse
            example: !include examples/newViewResponse-example.json
/views: 
  /active{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Lists active shared and personal Views available to the current user
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: listViewsResponse
              example: !include examples/listActiveViewsResponse-example.json
  /compact{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: A compacted list of shared and personal views available to the current user
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: listViewsResponse
              example: !include examples/listViews-CompactResponse-example.json
  /{id}{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: Show view
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: gettingViewsResponse
              example: !include examples/gettingViewsResponse-example.json
    put: 
      description: Update view
      body: 
        application/json: 
          schema: updateViewRequest
          example: !include examples/updateViewRequest-example.json
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: updateViewResponse
              example: !include examples/updateViewResponse-example.json
    delete: 
      description: Delete view
      responses: 
        200: 
  /{id}: 
    /execute{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: You execute a view in order to get the tickets that fulfill the conditions of the view.
        queryParameters: 
          sort_by: 
            description: Sort
            example: id
          sort_order: 
            example: desc
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: executingViewsResponse
                example: !include examples/executingViewsResponse-example.json
    /tickets{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: |
          Show view tickets
        responses: 
          200: 
            body: 
              application/json: 
                schema: viewTicketsResponse
                example: !include examples/viewTicketsResponse-example.json
    /count{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: Returns the ticket count for a single view.
        responses: 
          200: 
            body: 
              application/json: 
                schema: ticketsCountResponse
                example: !include examples/ticketsCountResponse-example.json
    /export{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: Returns the csv attachment of the current view if possible. Enqueues job to produce the csv if necessary
        responses: 
          200: 
            description: ""
            body: 
              application/json: 
                schema: exportingViewsResponse
                example: !include examples/exportingViewsResponse-example.json
  /count_many{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      is: [ ids ]
      description: Calculates the size of the view in terms of number of tickets the view will return. Only returns values for personal and shared views accessible to the user performing the request.
      responses: 
        200: 
          body: 
            application/json: 
              schema: viewCountManyResponse
              example: !include examples/viewCountManyResponse-example.json
  /preview{mediaTypeExtension}: 
    type: mediaTypeExtension
    post: 
      description: "Views can be previewed by constructing the conditions in the proper format and nesting them under the 'view' key. The output can also be controlled by passing in any of the following parameters and nesting them under the 'output' key."
      body: 
        application/json: 
          schema: previewView
          example: !include examples/previewView-example.json
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: previewingViewsResponse
              example: !include examples/previewingViewsResponse-example.json
  /preview: 
    /count{mediaTypeExtension}: 
      type: mediaTypeExtension
      post: 
        description: Returns the ticket count for a single preview.
        body: 
          application/json: 
            schema: countPreview
            example: !include examples/countPreview-example.json
        responses: 
          200: 
            body: 
              application/json: 
                schema: viewPreviewCountResponse
                example: !include examples/viewPreviewCountResponse-example.json
/help_center: 
  /sections: 
    /{section_id}: 
      /access_policy{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: Show Access Policy
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: showAccessPolicyResponse
                  example: !include examples/showAccessPolicyResponse-example.json
        put: 
          description: Update Access Policy
          body: 
            application/json: 
              schema: updateAccessPolicy
              example: !include examples/updateAccessPolicy-example.json
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: updateAccessPolicyResponse
                  example: !include examples/updateAccessPolicyResponse-example.json
      /subscriptions{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: Lists the subscriptions to a given section
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: listSectionSubscriptionsResponse
                  example: !include examples/listSectionSubscriptionsResponse-example.json
        post: 
          description: Creates a subscription to a given section.
          body: 
            application/json: 
              schema: sectionSubscription
              example: !include examples/sectionSubscription-example.json
          responses: 
            201: 
              description: |
                Created
                Location: https://{subdomain}.zendesk.com/api/v2/help_center/subscriptions/{id}.json
              body: 
                application/json: 
                  schema: createSectionSubscriptionResponse
                  example: !include examples/createSectionSubscriptionResponse-example.json
      /subscriptions: 
        /{id}{mediaTypeExtension}: 
          type: mediaTypeExtension
          get: 
            description: Lists the subscriptions to a given section
            responses: 
              200: 
                description: OK
                body: 
                  application/json: 
                    schema: showSectionSubscriptionResponse
                    example: !include examples/showSectionSubscriptionResponse-example.json
          delete: 
            description: Removes a subscription to a given section.
            responses: 
              200: 
      /translations{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: Lists all translations for a given article, section, or category.
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: listTranslationsResponse
                  example: !include examples/listTranslationsResponse-example.json
        post: 
          description: Creates a translation for a given article, section, or category. Any locale that you specify must be enabled for the current Help Center. The locale must also be different from that of any existing translation associated with the source object.
          body: 
            application/json: 
              schema: createTranslation
              example: !include examples/createTranslation-example.json
          responses: 
            201: 
              description: |
                Created
                Location: https://{subdomain}.zendesk.com/api/v2/help_center/translations/{id}.json
              body: 
                application/json: 
                  schema: createTranslationResponse
                  example: !include examples/createTranslationResponse-example.json
      /translations: 
        /missing{mediaTypeExtension}: 
          type: mediaTypeExtension
          get: 
            description: "Lists the locales that don't have a translation for a given article, section, or category."
            responses: 
              200: 
                description: OK
                body: 
                  application/json: 
                    schema: listMissingTranslationsResponse
                    example: !include examples/listMissingTranslationsResponse-example.json
        /{locale}{mediaTypeExtension}: 
          type: mediaTypeExtension
          put: 
            description: When updating a translation, any locale that you specify must be enabled for the current Help Center. If you change the translation locale, it must be different from that of any existing translation associated with the same source object.
            responses: 
              200: 
                description: OK
                body: 
                  application/json: 
                    schema: updateTranslationResponse
                    example: !include examples/updateTranslationResponse-example.json
      /articles{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: These endpoints let you list all articles, all articles in a locale, all articles in a given category or section, or all the articles provided by a specific agent. You can also list all articles that have been updated since a specified start time.
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: listArticlesResponse
                  example: !include examples/listArticlesResponse-example.json
        post: 
          description: "Creates an article in the specified section. You must specify an article title and locale. The locale can be omitted if it's specified in the URL. Optionally, you can specify multiple translations for the article. The specified locales must be enabled for the current Help Center."
          responses: 
            201: 
              description: |
                Created
                Location: https://{subdomain}.zendesk.com/api/v2/help_center/articles/{id}.json
              body: 
                application/json: 
                  schema: createArticleResponse
                  example: !include examples/createArticleResponse-example.json
      /source_locale{mediaTypeExtension}: 
        type: mediaTypeExtension
        put: 
          description: "This endpoint lets you set a section's source language to something other than the default language of your Zendesk. For example, if the default language of your Zendesk is English but your KB has a section only for Japanese customers, you can set the section's source locale to 'ja'."
          body: 
            application/json: 
              schema: sourceLocale
              example: !include examples/sourceLocale-example.json
          responses: 
            200: 
    /{id}{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: List sections.
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: showSectionResponse
                example: !include examples/showSectionResponse-example.json
      put: 
        description: "These endpoints only update section-level metadata such as the sorting position. They don't update section translations. See Translations."
        body: 
          application/json: 
            schema: updateSection
            example: !include examples/updateSection-example.json
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: updateSectionResponse
                example: !include examples/updateSectionResponse-example.json
      delete: 
        description: |
          Delete section
          WARNING: All articles in the section will also be deleted.
        responses: 
          200: 
  /articles{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: The search articles endpoint in the Articles API also takes labels into account. If you want to search for articles with specific labels, you can use the list articles endpoint and filter by label names.
      queryParameters: 
        label_names: 
          description: Label name
          example: title
      responses: 
        200: 
          body: 
            application/json: 
              schema: hcArticlesResponse
              example: !include examples/hcArticlesResponse-example.json
  /{locale}: 
    /articles{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: These endpoints let you list all articles, all articles in a locale, all articles in a given category or section, or all the articles provided by a specific agent. You can also list all articles that have been updated since a specified start time.
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: listArticlesResponse
                example: !include examples/listArticlesResponse-example.json
    /articles: 
      /{id}{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: Shows the properties of an article.
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: showArticleResponse
                  example: !include examples/showArticleResponse-example.json
        put: 
          description: "These endpoints update article-level metadata such as its promotion status or sorting position. The endpoints do not update translation properties such as the article's title or body. See Translations."
          body: 
            application/json: 
              schema: updateArticle
              example: !include examples/updateArticle-example.json
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: updateArticleResponse
                  example: !include examples/updateArticleResponse-example.json
    /sections: 
      /{id}: 
        /articles{mediaTypeExtension}: 
          type: mediaTypeExtension
          post: 
            description: "Creates an article in the specified section. You must specify an article title and locale. The locale can be omitted if it's specified in the URL. Optionally, you can specify multiple translations for the article. The specified locales must be enabled for the current Help Center."
            body: 
              application/json: 
                schema: hcArcticleCreateRequest
                example: !include examples/hcArcticleCreateRequest-example.json
            responses: 
              201: 
                description: |
                  Created
                  Location: https://{subdomain}.zendesk.com/api/v2/help_center/articles/{id}.json
                body: 
                  application/json: 
                    schema: createArticleResponse
                    example: !include examples/createArticleResponse-example.json
      /{id}{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: The access policy will be serialized as shown in the default access policy serializer.
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: showSectionResponse
                  example: !include examples/showSectionResponse-example.json
        put: 
          description: "These endpoints only update section-level metadata such as the sorting position. They don't update section translations. See Translations."
          body: 
            application/json: 
              schema: updateSection
              example: !include examples/updateArticle-example.json
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: updateSectionResponse
                  example: !include examples/updateSectionResponse-example.json
    /categories{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: List Categories
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: listCategoriesResponse
                example: !include examples/listCategoriesResponse-example.json
      post: 
        description: "Create category. You must specify a category name and locale. The locale can be omitted if it's specified in the URL. Optionally, you can specify multiple translations for the category. The specified locales must be enabled for the current Help Center."
        body: 
          application/json: 
            schema: createCategory
            example: !include examples/createCategory-example.json
        responses: 
          201: 
            description: |
              Created
              Location: https://{subdomain}.zendesk.com/api/v2/help_center/categories/{id}.json
            body: 
              application/json: 
                schema: createCategoryResponse
                example: !include examples/createCategoryResponse-example.json
    /categories: 
      /{id}{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: Show Category
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: showCategoryResponse
                  example: !include examples/showCategoryResponse-example.json
        put: 
          description: "These endpoints only update category-level metadata such as the sorting position. They don't update category translations."
          body: 
            application/json: 
              schema: updateCategory
              example: !include examples/updateCategory-example.json
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: updateCategoryHCResponse
                  example: !include examples/updateCategoryHCResponse-example.json
      /{id}: 
        /sections{mediaTypeExtension}: 
          type: mediaTypeExtension
          post: 
            description: "Creates a section in a given category. You must specify a section name and locale. The locale can be omitted if it's specified in the URL. Optionally, you can specify multiple translations for the section. The specified locales must be enabled for the current Help Center."
            body: 
              application/json: 
                schema: createCategorySection
                example: !include examples/createCategorySection-example.json
            responses: 
              201: 
                description: |
                  Created
                  Location: https://{subdomain}.zendesk.com/api/v2/help_center/sections/{id}.json
                body: 
                  application/json: 
                    schema: createSectionResponse
                    example: !include examples/createSectionResponse-example.json
    /sections{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: Lists all sections or all sections in a given locale or category.
        responses: 
          200: 
            body: 
              application/json: 
                schema: hcLocaleSectionsResponse
                example: !include examples/hcLocaleSectionsResponse-example.json
  /categories: 
    /{id}{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: Show Category
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: showCategoryResponse
                example: !include examples/showCategoryResponse-example.json
      put: 
        description: "These endpoints only update category-level metadata such as the sorting position. They don't update category translations."
        body: 
          application/json: 
            schema: updateCategory
            example: !include examples/updateCategory-example.json
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: updateCategoryResponse
                example: !include examples/updateCategoryResponse-example.json
      delete: 
        description: |
          Delete category
          WARNING: Every section and all articles in the category will also be deleted.
        responses: 
          200: 
    /{category_id}: 
      /translations{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: Lists all translations for a given article, section, or category.
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: listTranslationsResponse
                  example: !include examples/listTranslationsResponse-example.json
        post: 
          description: Creates a translation for a given article, section, or category. Any locale that you specify must be enabled for the current Help Center. The locale must also be different from that of any existing translation associated with the source object.
          body: 
            application/json: 
              schema: createTranslation
              example: !include examples/createTranslation-example.json
          responses: 
            201: 
              description: |
                Created
                Location: https://{subdomain}.zendesk.com/api/v2/help_center/translations/{id}.json
              body: 
                application/json: 
                  schema: createTranslationResponse
                  example: !include examples/createTranslationResponse-example.json
      /translations: 
        /missing{mediaTypeExtension}: 
          type: mediaTypeExtension
          get: 
            description: "Lists the locales that don't have a translation for a given article, section, or category."
            responses: 
              200: 
                description: OK
                body: 
                  application/json: 
                    schema: listMissingTranslationsResponse
                    example: !include examples/listMissingTranslationsResponse-example.json
        /{locale}{mediaTypeExtension}: 
          type: mediaTypeExtension
          put: 
            description: When updating a translation, any locale that you specify must be enabled for the current Help Center. If you change the translation locale, it must be different from that of any existing translation associated with the same source object.
            body: 
              application/json: 
                schema: updateLocale
                example: !include examples/updateLocale-example.json
            responses: 
              200: 
                description: OK
                body: 
                  application/json: 
                    schema: updateTranslationResponse
                    example: !include examples/updateTranslationResponse-example.json
      /articles{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: These endpoints let you list all articles, all articles in a locale, all articles in a given category or section, or all the articles provided by a specific agent. You can also list all articles that have been updated since a specified start time.
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: listArticlesResponse
                  example: !include examples/listArticlesResponse-example.json
      /source_locale{mediaTypeExtension}: 
        type: mediaTypeExtension
        put: 
          description: The endpoint updates category source_locale property
          body: 
            application/json: 
              schema: updateSourceLocale
              example: !include examples/updateSourceLocale-example.json
          responses: 
            200: 
      /sections{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: Lists all sections or all sections in a given locale or category.
          responses: 
            200: 
              body: 
                application/json: 
                  schema: hcLocaleSectionsResponse
                  example: !include examples/hcLocaleSectionsResponse-example.json
        post: 
          description: "Creates a section in a given category. You must specify a section name and locale. The locale can be omitted if it's specified in the URL. Optionally, you can specify multiple translations for the section. The specified locales must be enabled for the current Help Center."
          body: 
            application/json: 
              schema: createCategory
              example: !include examples/createCategory-example.json
          responses: 
            201: 
              description: |
                Created
                Location: https://{subdomain}.zendesk.com/api/v2/help_center/sections/{id}.json
              body: 
                application/json: 
                  schema: createSectionResponse
                  example: !include examples/createSectionResponse-example.json
  /users: 
    /{id}: 
      /articles{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: These endpoints let you list all articles, all articles in a locale, all articles in a given category or section, or all the articles provided by a specific agent. You can also list all articles that have been updated since a specified start time.
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: listArticlesResponse
                  example: !include examples/listArticlesResponse-example.json
      /comments{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: Lists the comments created by a specific user, or all comments made by all users on a specific article.
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: listCommentsResponse
                  example: !include examples/listCommentsResponse-example.json
      /subscriptions{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: Lists the subscriptions of a given user. To list your own subscriptions, specify me as the user id.
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: listSubscriptionsByUserResponse
                  example: !include examples/listSubscriptionsByUserResponse-example.json
      /votes{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: Lists all votes cast by a given user, or all votes cast by all users for a given article.
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: listVotesResponse
                  example: !include examples/listVotesResponse-example.json
  /incremental: 
    /articles{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: These endpoints let you list all articles, all articles in a locale, all articles in a given category or section, or all the articles provided by a specific agent. You can also list all articles that have been updated since a specified start time.
        queryParameters: 
          start_time: 
            description: Starit time
            example: start_time=1404345231
          label_names: 
            description: Label names
            example: label_names=photos,camera
        responses: 
          200: 
            body: 
              application/json: 
                schema: hcArticlesResponse
                example: !include examples/hcArticlesResponse-example.json
  /articles: 
    /search{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        is: [ query ]
        description: Searches for articles or questions.
        queryParameters: 
          updated_after: 
            description: Update after
            example: update_after=1404345231
          updated_before: 
            description: Update before
            example: update_before=1406345231
          label_names: 
            description: Label names
            example: label_names=photos,camera
          locale: 
            description: locale
            example: locale={locale}
          category: 
            description: category
            example: category={category id}
        responses: 
          200: 
            body: 
              application/json: 
                schema: hcArticleSearchResponse
                example: !include examples/hcArticleSearchResponse-example.json
    /{id}{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: Shows the properties of an article.
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: showArticleResponse
                example: !include examples/showArticleResponse-example.json
      put: 
        description: "These endpoints update article-level metadata such as its promotion status or sorting position. The endpoints do not update translation properties such as the article's title or body. See Translations."
        body: 
          application/json: 
            schema: updateArticle
            example: !include examples/updateArticle-example.json
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: updateArticleResponse
                example: !include examples/updateArticleResponse-example.json
      delete: 
        description: The endpoint updates article source_locale property
        responses: 
          200: 
    /{id}: 
      /bulk_attachments{mediaTypeExtension}: 
        type: mediaTypeExtension
        post: 
          description: You can associate attachments in bulk to only one article at a time, with a maximum of 20 attachments per request.
          body: 
            application/json: 
              schema: createBulkAttachment
              example: !include examples/createBulkAttachment-example.json
          responses: 
            200: 
      /source_locale{mediaTypeExtension}: 
        type: mediaTypeExtension
        put: 
          description: The endpoint updates article source_locale property
          body: 
            application/json: 
              schema: updateSourceLocale
              example: !include examples/updateSourceLocale-example.json
          responses: 
            200: 
      /attachments{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: "Lists all the article's attachments."
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: listArticleAttachmentsResponse
                  example: !include examples/listArticleAttachmentsResponse-example.json
        post: 
          description: Create attachment
          body: 
            multipart/form-data: 
              formParameters: 
                file: 
          responses: 
            201: 
              body: 
                application/json: 
                  schema: articleAttachment
                  example: !include examples/articleAttachment-example.json
      /comments{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: Lists the comments created by a specific user, or all comments made by all users on a specific article.
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: listCommentsResponse
                  example: !include examples/listCommentsResponse-example.json
        post: 
          description: Adds a comment to the specified article. Because comments are associated with a specific article translation, or locale, you must specify a locale.
          body: 
            application/json: 
              schema: createArticleComments
              example: !include examples/createArticleComments-example.json
          responses: 
            201: 
              description: |
                Created
                Location: https://{subdomain}.zendesk.com/api/v2/help_center/comments/{id}.json
              body: 
                application/json: 
                  schema: createCommentResponse
                  example: !include examples/createCommentResponse-example.json
      /comments: 
        /{id}{mediaTypeExtension}: 
          type: mediaTypeExtension
          get: 
            description: Shows the properties of the specified comment.
            responses: 
              200: 
                description: OK
                body: 
                  application/json: 
                    schema: showCommentResponse
                    example: !include examples/showCommentResponse-example.json
          put: 
            description: Adds a comment to the specified article. Because comments are associated with a specific article translation, or locale, you must specify a locale.
            body: 
              application/json: 
                schema: updateArticleComment
                example: !include examples/updateArticleComment-example.json
            responses: 
              200: 
                description: OK
                body: 
                  application/json: 
                    schema: updateCommentResponse
                    example: !include examples/updateCommentResponse-example.json
          delete: 
            description: Delete article comment
            responses: 
              200: 
      /labels{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: Lists all the labels in a given article.
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: listArticleLabelsResponse
                  example: !include examples/listArticleLabelsResponse-example.json
        post: 
          description: Create label
          body: 
            application/json: 
              schema: createArticleLabel
              example: !include examples/createArticleLabel-example.json
          responses: 
            201: 
              description: Created
              body: 
                application/json: 
                  schema: createLabelResponse
                  example: !include examples/createLabelResponse-example.json
      /up{mediaTypeExtension}: 
        type: mediaTypeExtension
        post: 
          description: "Creates an up or down vote for a given article, question, or answer. If a vote already exists for the source object, it's updated."
          responses: 
            200: 
              description: |
                OK
                Location: https://{subdomain}.zendesk.com/api/v2/help_center/votes/{id}.json
              body: 
                application/json: 
                  schema: createVoteResponse
                  example: !include examples/createVoteResponse-example.json
      /down{mediaTypeExtension}: 
        type: mediaTypeExtension
        post: 
          description: "Creates an up or down vote for a given article, question, or answer. If a vote already exists for the source object, it's updated."
          responses: 
            200: 
              description: |
                OK
                Location: https://{subdomain}.zendesk.com/api/v2/help_center/votes/{id}.json
              body: 
                application/json: 
                  schema: createVoteResponse
                  example: !include examples/createVoteResponse-example.json
      /attachments: 
        /inline{mediaTypeExtension}: 
          type: mediaTypeExtension
          get: 
            description: "Lists all the article's inline attachments."
            responses: 
              200: 
                description: OK
                body: 
                  application/json: 
                    schema: listArticleInlineAttachmentsResponse
                    example: !include examples/listArticleInlineAttachmentsResponse-example.json
        /block{mediaTypeExtension}: 
          type: mediaTypeExtension
          get: 
            description: "Lists all the article's block attachments. Block attachments are those that are not inline."
            responses: 
              200: 
                description: OK
                body: 
                  application/json: 
                    schema: listArticleBlockAttachmentsResponse
                    example: !include examples/listArticleBlockAttachmentsResponse-example.json
      /labels: 
        /{id}{mediaTypeExtension}: 
          type: mediaTypeExtension
          delete: 
            description: Delete label
            responses: 
              200: 
      /subscriptions{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: Lists the subscriptions to a given article.
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: listArticleSubscriptionsResponse
                  example: !include examples/listArticleSubscriptionsResponse-example.json
        post: 
          description: Creates a subscription to a given article.
          body: 
            application/json: 
              schema: createSubscription
              example: !include examples/createSubscription-example.json
          responses: 
            201: 
              description: |
                Created
                Location: https://{subdomain}.zendesk.com/api/v2/help_center/subscriptions/{id}.json
              body: 
                application/json: 
                  schema: createArticleSubscriptionResponse
                  example: !include examples/createArticleSubscriptionResponse-example.json
      /subscriptions: 
        /{id}{mediaTypeExtension}: 
          type: mediaTypeExtension
          get: 
            description: Lists the subscriptions to a given article.
            responses: 
              200: 
                description: OK
                body: 
                  application/json: 
                    schema: showArticleSubscriptionResponse
                    example: !include examples/showArticleSubscriptionResponse-example.json
          delete: 
            description: Removes a subscription to a given article.
            responses: 
              200: 
      /translations{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: Lists all translations for a given article, section, or category.
          queryParameters: 
            outdated: 
              description: outdated
              type: boolean
              example: outdated=true
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: listTranslationsResponse
                  example: !include examples/listTranslationsResponse-example.json
        post: 
          description: Creates a translation for a given article, section, or category. Any locale that you specify must be enabled for the current Help Center. The locale must also be different from that of any existing translation associated with the source object.
          body: 
            application/json: 
              schema: createTranslation
              example: !include examples/createTranslation-example.json
          responses: 
            201: 
              description: |
                Created
                Location: https://{subdomain}.zendesk.com/api/v2/help_center/translations/{id}.json
              body: 
                application/json: 
                  schema: createTranslationResponse
                  example: !include examples/createTranslationResponse-example.json
      /translations: 
        /missing{mediaTypeExtension}: 
          type: mediaTypeExtension
          get: 
            description: "Lists the locales that don't have a translation for a given article, section, or category."
            responses: 
              200: 
                description: OK
                body: 
                  application/json: 
                    schema: listMissingTranslationsResponse
                    example: !include examples/listMissingTranslationsResponse-example.json
        /{locale}{mediaTypeExtension}: 
          type: mediaTypeExtension
          get: 
            description: Show locale translation
            responses: 
              200: 
                description: OK
                body: 
                  application/json: 
                    schema: showTranslationResponse
                    example: !include examples/showTranslationResponse-example.json
          put: 
            description: When updating a translation, any locale that you specify must be enabled for the current Help Center. If you change the translation locale, it must be different from that of any existing translation associated with the same source object.
            body: 
              application/json: 
                schema: updateLocale
                example: !include examples/updateLocale-example.json
            responses: 
              200: 
                description: OK
                body: 
                  application/json: 
                    schema: updateTranslationResponse
                    example: !include examples/updateTranslationResponse-example.json
      /votes{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: Lists all votes cast by a given user, or all votes cast by all users for a given article.
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: listVotesResponse
                  example: !include examples/listVotesResponse-example.json
    /attachments: 
      /{id}{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: Shows the properties of the specified attachment.
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: showArticleAttachmentResponse
                  example: !include examples/showArticleAttachmentResponse-example.json
        delete: 
          description: Delete attachment
          responses: 
            200: 
    /attachments{mediaTypeExtension}: 
      type: mediaTypeExtension
      post: 
        description: Create attachment
        body: 
          multipart/form-data: 
            formParameters: 
              file: 
                type: date
                required: true
        responses: 
          201: 
            description: |
              Created
              Location: https://{subdomain}.zendesk.com/api/v2/help_center/articles/attachments.json
            body: 
              application/json: 
                schema: createUnassociatedAttachmentResponse
                example: !include examples/createUnassociatedAttachmentResponse-example.json
    /labels{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: Lists all the labels in all the articles in Help Center.
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: listAllLabelsResponse
                example: !include examples/listAllLabelsResponse-example.json
    /labels: 
      /{id}{mediaTypeExtension}: 
        type: mediaTypeExtension
        get: 
          description: Shows the properties of the specified label.
          responses: 
            200: 
              description: OK
              body: 
                application/json: 
                  schema: showLabelResponse
                  example: !include examples/showLabelResponse-example.json
  /categories{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: List Categories
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: listCategoriesResponse
              example: !include examples/listCategoriesResponse-example.json
    post: 
      description: "Create category. You must specify a category name and locale. The locale can be omitted if it's specified in the URL. Optionally, you can specify multiple translations for the category. The specified locales must be enabled for the current Help Center."
      body: 
        application/json: 
          schema: createCategory
          example: !include examples/createCategory-example.json
      responses: 
        201: 
          description: |
            Created
            Location: https://{subdomain}.zendesk.com/api/v2/help_center/categories/{id}.json
          body: 
            application/json: 
              schema: createCategoryResponse
              example: !include examples/createCategoryResponse-example.json
  /questions: 
    /search{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        is: [ query ]
        description: Searches for articles or questions.
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: searchArticlesorQuestionsResponse
                example: !include examples/searchArticlesorQuestionsResponse-example.json
    /{id}: 
      /up{mediaTypeExtension}: 
        type: mediaTypeExtension
        post: 
          description: "Creates an up or down vote for a given article, question, or answer. If a vote already exists for the source object, it's updated."
          responses: 
            200: 
              description: |
                OK
                Location: https://{subdomain}.zendesk.com/api/v2/help_center/votes/{id}.json
              body: 
                application/json: 
                  schema: createVoteResponse
                  example: !include examples/createVoteResponse-example.json
      /down{mediaTypeExtension}: 
        type: mediaTypeExtension
        post: 
          description: "Creates an up or down vote for a given article, question, or answer. If a vote already exists for the source object, it's updated."
          responses: 
            200: 
              description: |
                OK
                Location: https://{subdomain}.zendesk.com/api/v2/help_center/votes/{id}.json
              body: 
                application/json: 
                  schema: createVoteResponse
                  example: !include examples/createVoteResponse-example.json
  /sections{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: The access policy will be serialized as shown in the default access policy serializer.
      queryParameters: 
        include: 
          description: List of entities to be side-loaded. For performance reasons this tickets API does not allow last_audits to be side-loaded.
          example: abilities
      responses: 
        200: 
          description: OK
          body: 
            application/json: 
              schema: listSectionsResponse
              example: !include examples/listSectionsResponse-example.json
  /translations: 
    /{id}{mediaTypeExtension}: 
      type: mediaTypeExtension
      delete: 
        description: "Deletes a translation, provided it's not the only translation for the source object."
        responses: 
          200: 
  /locales{mediaTypeExtension}: 
    type: mediaTypeExtension
    get: 
      description: "Deletes a translation, provided it's not the only translation for the source object."
      responses: 
        200: 
          description: ""
          body: 
            application/json: 
              schema: listallenabledlocalesanddefaultlocaleResponse
              example: !include examples/listallenabledlocalesanddefaultlocaleResponse-example.json
  /votes: 
    /{id}{mediaTypeExtension}: 
      type: mediaTypeExtension
      get: 
        description: Lists all votes cast by a given user, or all votes cast by all users for a given article.
        responses: 
          200: 
            description: OK
            body: 
              application/json: 
                schema: showVoteResponse
                example: !include examples/showVoteResponse-example.json
      delete: 
        description: Delete vote
        responses: 
          200: 
  /answers: 
    /{id}: 
      /up{mediaTypeExtension}: 
        type: mediaTypeExtension
        post: 
          description: "Creates an up or down vote for a given article, question, or answer. If a vote already exists for the source object, it's updated."
          responses: 
            200: 
              description: |
                OK
                Location: https://{subdomain}.zendesk.com/api/v2/help_center/votes/{id}.json
              body: 
                application/json: 
                  schema: createVoteResponse
                  example: !include examples/createVoteResponse-example.json
      /down{mediaTypeExtension}: 
        type: mediaTypeExtension
        post: 
          description: "Creates an up or down vote for a given article, question, or answer. If a vote already exists for the source object, it's updated."
          responses: 
            200: 
              description: |
                OK
                Location: https://{subdomain}.zendesk.com/api/v2/help_center/votes/{id}.json
              body: 
                application/json: 
                  schema: createVoteResponse
                  example: !include examples/createVoteResponse-example.json
/bookmarks{mediaTypeExtension}: 
  type: mediaTypeExtension
  get: 
    description: |
      List Bookmarks
    responses: 
      200: 
        body: 
          application/json: 
            schema: bookmarkResponse
            example: !include examples/bookmarkResponse-example.json
  post: 
    description: |
      Create Bookmark
    body: 
      application/json: 
        schema: bookmarkCreateRequest
        example: !include examples/bookmarkCreateRequest-example.json
    responses: 
      201: 
        body: 
          application/json: 
            schema: bookmarkCreateResponse
            example: !include examples/bookmarkCreateResponse-example.json
/bookmarks/{id}{mediaTypeExtension}: 
  type: mediaTypeExtension
  delete: 
    description: |
      Delete Bookmark
    responses: 
      200: 
documentation: 
  - title: Headline
    content: !include docs/headline.md